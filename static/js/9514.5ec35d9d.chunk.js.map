{"version":3,"file":"static/js/9514.5ec35d9d.chunk.js","mappings":"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","sources":["components/CancelSubmitBtns/index.tsx","data/conferenceRegister.tsx","content/manage/Conference/ConferenceEdit/ConferenceInfo.tsx","content/manage/Conference/ConferenceRegister/index.tsx","data/MemberValues.ts"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\n\nimport { Button, Stack } from '@mui/material'\n\ninterface CancelSubmitBtnsProps {\n  handleSubmit: React.MouseEventHandler<HTMLButtonElement>\n  handleCancel?: React.MouseEventHandler<HTMLButtonElement>\n  displayCancelBtn?: boolean\n  submitBtnText?: string\n  cancelBtnText?: string\n}\n\nconst CancelSubmitBtns: React.FC<CancelSubmitBtnsProps> = ({\n  handleSubmit,\n  handleCancel,\n  displayCancelBtn = true,\n  submitBtnText = '등록',\n  cancelBtnText = '취소'\n}: CancelSubmitBtnsProps) => {\n  const navigate = useNavigate()\n\n  const _handleCancel: React.MouseEventHandler<HTMLButtonElement> = event => {\n    if (handleCancel === undefined) navigate(-1)\n    else handleCancel(event)\n  }\n\n  return (\n    <Stack mt={2} pb={2} direction=\"row\" spacing={2} justifyContent=\"center\">\n      {displayCancelBtn && (\n        <Button color=\"error\" variant=\"outlined\" sx={{ width: '50%', maxWidth: '120px' }} onClick={_handleCancel}>\n          {cancelBtnText}\n        </Button>\n      )}\n\n      <Button color=\"success\" variant=\"contained\" onClick={handleSubmit} sx={{ width: '50%', maxWidth: '120px' }}>\n        {submitBtnText}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default CancelSubmitBtns\n","import { Chip, colors } from '@mui/material'\nimport type { GridColDef, GridRenderCellParams } from '@mui/x-data-grid'\n\nimport type { ClubMember } from 'src/models/clubMember'\n\nimport { MEMBER_VALUES } from './MemberValues'\n\nconst getStatusValue = (params: GridRenderCellParams<ClubMember>) => {\n  if (params.row.withdrawalAt) {\n    return MEMBER_VALUES.status[3].display\n  }\n  if (params.row.firedAt) {\n    return MEMBER_VALUES.status[2].display\n  }\n  if (params.value) {\n    return MEMBER_VALUES.status[1].display\n  }\n\n  return MEMBER_VALUES.status[0].display\n}\n\nexport const CONFERENCE_REGISTER_COLUMNN: GridColDef[] = [\n  { field: 'name', headerName: '이름', flex: 1 },\n  { field: 'studentId', headerName: '학번', flex: 1 },\n  { field: 'department', headerName: '소속 학부/학과', flex: 1 },\n  { field: 'level', headerName: '회원 등급', flex: 1 },\n  {\n    field: 'isPaused',\n    headerName: '활동 상태',\n    valueGetter: (params: GridRenderCellParams<ClubMember>) => getStatusValue(params),\n    renderCell: (params: GridRenderCellParams<ClubMember>) => {\n      let statusColor: string = colors.grey[800]\n      let bgColor: string = colors.grey[50]\n\n      switch (params.value) {\n        case MEMBER_VALUES.status[3].display:\n          statusColor = colors.grey[800]\n          bgColor = colors.grey[50]\n          break\n        case MEMBER_VALUES.status[2].display:\n          statusColor = colors.red[800]\n          bgColor = colors.red[50]\n          break\n        case MEMBER_VALUES.status[1].display:\n          statusColor = colors.blue[800]\n          bgColor = colors.blue[50]\n          break\n        default:\n          statusColor = colors.green[800]\n          bgColor = colors.green[50]\n          break\n      }\n      return <Chip label={params.value} size=\"small\" sx={{ color: statusColor, bgcolor: bgColor }} />\n    }\n  }\n]\n","import axios, { type AxiosResponse } from 'axios'\nimport { useEffect, useRef, useState } from 'react'\nimport { useAuthHeader } from 'react-auth-kit'\nimport { useParams } from 'react-router-dom'\n\nimport { Box, Checkbox, Divider, Grid, TextField, Typography } from '@mui/material'\nimport type { GridRowSelectionModel } from '@mui/x-data-grid'\nimport {\n  DataGrid,\n  GridToolbarColumnsButton,\n  GridToolbarContainer,\n  GridToolbarDensitySelector,\n  GridToolbarExport,\n  GridToolbarFilterButton,\n  GridToolbarQuickFilter\n} from '@mui/x-data-grid'\n\nimport { CONFERENCE_REGISTER_COLUMNN } from 'src/data/conferenceRegister'\n\nimport { type ClubMember } from 'src/models/clubMember'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport { PureLightTheme } from 'src/theme/schemes/PureLightTheme'\n\ninterface ConferenceInfoProps {\n  title: string\n  changeTitle: (title: string) => void\n  participantTarget: string\n  changeParticipantTarget: (participantTarget: string) => void\n  selectedMembers: number[]\n  setSelectedMembers: React.Dispatch<React.SetStateAction<number[]>>\n  handleSubmit?: () => void\n}\n\nconst ConferenceInfo: React.FC<ConferenceInfoProps> = ({\n  title,\n  changeTitle,\n  participantTarget,\n  changeParticipantTarget,\n  selectedMembers,\n  setSelectedMembers,\n  handleSubmit\n}) => {\n  const [members, setMembers] = useState<ClubMember[]>([])\n  const [levels, setLevels] = useState<string[]>([])\n  const [isPausedListing, setIsPausedListing] = useState<boolean>(true)\n  const [tableWidth, setTableWidth] = useState(0)\n\n  const { id } = useParams()\n  const clubId = Number(id)\n  const authHeader = useAuthHeader()\n  const tableRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_APIHOST}/club/${clubId}/member`, {\n        headers: { Authorization: authHeader() }\n      })\n      .then((res: AxiosResponse<ClubMember[]>) => {\n        const activeMembers = res.data.filter(member => member.deletedAt === null && member.firedAt === null)\n        const sortedActiveMembers = activeMembers\n        sortedActiveMembers.sort((a, b) => (a.name < b.name ? -1 : 1))\n        setMembers(sortedActiveMembers)\n\n        const levels = Array.from(\n          new Set(\n            activeMembers\n              .filter((member: ClubMember) => member.level !== null)\n              .map((member: ClubMember) => member.level)\n          )\n        ).sort()\n        setLevels(levels)\n      })\n  }, [])\n\n  useEffect(() => {\n    setTableWidth(tableRef.current?.clientWidth || 450)\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('resize', getTableWidth)\n  }, [])\n  const getTableWidth = () => {\n    if (tableRef.current) {\n      setTableWidth(tableRef.current.clientWidth)\n    }\n  }\n\n  const conferenceMemberRows = members.map(member => ({\n    id: member.id,\n    name: member.name,\n    studentId: member.studentId,\n    department: member.department,\n    level: member.level,\n    isPaused: member.isPaused\n  }))\n\n  const handleIsPausedChange: React.ChangeEventHandler<HTMLInputElement> = event => {\n    setIsPausedListing(() => event.target.checked)\n  }\n\n  const handleRowSelectionChange = (selectedMemberIds: GridRowSelectionModel) => {\n    const selectedIDs = new Set(selectedMemberIds)\n    const selectedRows = conferenceMemberRows.filter(row => selectedIDs.has(row.id))\n    setSelectedMembers(selectedRows.map(row => row.id))\n  }\n\n  const Toolbar = () => {\n    return (\n      <GridToolbarContainer sx={{ justifyContent: 'space-between' }}>\n        <GridToolbarColumnsButton />\n        <GridToolbarFilterButton sx={{ '& svg': { width: '18px', height: '18px' } }} />\n        <GridToolbarDensitySelector />\n        <GridToolbarExport />\n        <GridToolbarQuickFilter />\n      </GridToolbarContainer>\n    )\n  }\n\n  return (\n    <Grid container sx={{ justifyContent: 'center' }}>\n      <Grid item xs={12} md={8}>\n        <Box>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" flexWrap=\"wrap\" mt={1} mb={0.5}>\n            <Box display=\"flex\" alignItems=\"baseline\">\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} display=\"inline-block\" whiteSpace='nowrap'>\n                {'참여인원 '}\n              </Typography>\n              <Typography variant=\"caption\" fontSize={1} display=\"inline-block\">\n                가나다순\n              </Typography>\n              <Typography variant=\"caption\">행사에 참여해야하는 회원을 모두 체크해주세요</Typography>\n            </Box>\n\n            <Box>\n              <Typography display=\"inline-block\" variant=\"body1\">\n                휴회원 포함\n              </Typography>\n              <Checkbox sx={{ padding: '5px' }} checked={isPausedListing} onChange={handleIsPausedChange} />\n            </Box>\n          </Box>\n          <DataGrid\n            autoHeight\n            checkboxSelection\n            rowSelectionModel={selectedMembers}\n            onRowSelectionModelChange={handleRowSelectionChange}\n            rows={conferenceMemberRows}\n            columns={CONFERENCE_REGISTER_COLUMNN}\n            slots={{ toolbar: Toolbar }}\n            disableRowSelectionOnClick\n          />\n        </Box>\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <Box paddingX={{ xs: 3 }} paddingBottom={{ xs: 0 }}>\n          <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n            행사명\n          </Typography>\n          <TextField\n            required\n            id=\"title\"\n            label=\"행사명\"\n            value={title}\n            onChange={event => changeTitle(event.target.value)}\n            fullWidth\n          />\n          <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n            참여 대상\n          </Typography>\n          <TextField\n            id=\"participantTarget\"\n            label=\"행사에 참여해야하는 회원 그룹을 메모해주세요 (예시: 운영진 전체, 신입회원)\"\n            value={participantTarget}\n            onChange={event => changeParticipantTarget(event.target.value)}\n            fullWidth\n          />\n          {handleSubmit && (\n            <>\n              <Divider sx={{ marginTop: 2, marginBottom: 2 }} />\n              <CancelSubmitBtns submitBtnText=\"등록/수정\" handleSubmit={handleSubmit} />\n            </>\n          )}\n        </Box>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ConferenceInfo\n","import { useSnackbar } from 'notistack'\nimport { useState } from 'react'\nimport { useAuthUser } from 'react-auth-kit'\nimport { Helmet } from 'react-helmet-async'\nimport { useParams } from 'react-router-dom'\n\nimport { Box, Card } from '@mui/material'\n\nimport type { ClubMemberForAuth } from 'src/models/clubMember'\nimport { type DateProps } from 'src/models/date'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport ConferenceInfo from 'src/content/manage/Conference/ConferenceEdit/ConferenceInfo'\n\nimport { useCreateConference } from 'src/hooks/api/clubConferenceHooks'\n\nconst ConferenceRegister: React.FC = () => {\n  const [title, setTitle] = useState<string>('')\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n  const [participantTarget, setparticipantTarget] = useState<string>('')\n\n  const params = useParams()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const changeTitle = (title: string) => {\n    setTitle(title)\n  }\n  const changeParticipantTarget = (participantTarget: string) => {\n    setparticipantTarget(participantTarget)\n  }\n\n  const authUser = useAuthUser()\n  const clubId = Number(params.id)\n  const club = authUser()?.clubs.filter((c: ClubMemberForAuth) => c.id === clubId)[0] as ClubMemberForAuth\n\n  const clubDate: DateProps = { year: club.year, semester: club.semester }\n\n  const createConferenceMutation = useCreateConference({\n    clubId,\n    title: title,\n    users: selectedMembers,\n    participantTarget: participantTarget,\n    clubDate: clubDate\n  })\n\n  const handleSubmit = async () => {\n    if (title.length > 50) {\n      enqueueSnackbar('행사명은 50자 이내로 작성해 주십시오.', { variant: 'error' })\n      return\n    }\n    createConferenceMutation.mutateAsync()\n  }\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>출석 관리</title>\n      </Helmet>\n      <Card>\n        {selectedMembers && (\n          <ConferenceInfo\n            title={title}\n            changeTitle={changeTitle}\n            participantTarget={participantTarget}\n            changeParticipantTarget={changeParticipantTarget}\n            selectedMembers={selectedMembers}\n            setSelectedMembers={setSelectedMembers}\n          />\n        )}\n        <CancelSubmitBtns handleSubmit={handleSubmit} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default ConferenceRegister\n","export const MEMBER_VALUES = {\n  status: [\n    {\n      value: 'ACTIVE',\n      display: '활동 중'\n    },\n    {\n      value: 'PAUSED',\n      display: '휴회원'\n    },\n    {\n      value: 'FIRED',\n      display: '제적'\n    },\n    {\n      value: 'DELETED',\n      display: '탈퇴'\n    }\n  ],\n  level: [\n    {\n      value: '정회원',\n      display: '정회원'\n    },\n    {\n      value: '준회원',\n      display: '준회원'\n    },\n    {\n      value: '교류회원',\n      display: '교류회원'\n    },\n    {\n      value: '명예회원',\n      display: '명예회원'\n    },\n    {\n      value: '임시회원',\n      display: '임시회원'\n    },\n    {\n      value: '회원 분류 A',\n      display: '회원 분류 A'\n    },\n    {\n      value: '회원 분류 B',\n      display: '회원 분류 B'\n    },\n    {\n      value: '회원 분류 C',\n      display: '회원 분류 C'\n    }\n  ],\n  fee: [\n    {\n      value: 'O',\n      display: '납부'\n    },\n    {\n      value: 'X',\n      display: '미납부'\n    }\n  ],\n  isPaused: [\n    {\n      value: 'O',\n      display: '휴회원'\n    },\n    {\n      value: 'X',\n      display: '활동 중'\n    }\n  ],\n  permission: [\n    {\n      value: 'SUPERADMIN',\n      display: '회장'\n    },\n    {\n      value: 'ADMIN',\n      display: '운영진'\n    },\n    {\n      value: 'USER',\n      display: '일반 회원'\n    }\n  ]\n}\n"],"names":["_ref","handleSubmit","handleCancel","_ref$displayCancelBtn","displayCancelBtn","_ref$submitBtnText","submitBtnText","_ref$cancelBtnText","cancelBtnText","navigate","useNavigate","_jsxs","Stack","mt","pb","direction","spacing","justifyContent","children","_jsx","Button","color","variant","sx","width","maxWidth","onClick","event","undefined","CONFERENCE_REGISTER_COLUMNN","field","headerName","flex","valueGetter","params","row","withdrawalAt","MEMBER_VALUES","status","display","firedAt","value","getStatusValue","renderCell","statusColor","colors","bgColor","Chip","label","size","bgcolor","title","changeTitle","participantTarget","changeParticipantTarget","selectedMembers","setSelectedMembers","_useState","useState","_useState2","_slicedToArray","members","setMembers","_useState3","_useState4","setLevels","_useState5","_useState6","isPausedListing","setIsPausedListing","_useState7","_useState8","setTableWidth","id","useParams","clubId","Number","authHeader","useAuthHeader","tableRef","useRef","useEffect","axios","get","concat","process","headers","Authorization","then","res","activeMembers","data","filter","member","deletedAt","sortedActiveMembers","sort","a","b","name","levels","Array","from","Set","level","map","_tableRef$current","current","clientWidth","window","addEventListener","getTableWidth","conferenceMemberRows","studentId","department","isPaused","Grid","container","item","xs","md","Box","alignItems","flexWrap","mb","Typography","PureLightTheme","primary","main","whiteSpace","fontSize","Checkbox","padding","checked","onChange","target","DataGrid","autoHeight","checkboxSelection","rowSelectionModel","onRowSelectionModelChange","selectedMemberIds","selectedIDs","selectedRows","has","rows","columns","slots","toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","height","GridToolbarDensitySelector","GridToolbarExport","GridToolbarQuickFilter","disableRowSelectionOnClick","paddingX","paddingBottom","margin","TextField","required","fullWidth","_Fragment","Divider","marginTop","marginBottom","CancelSubmitBtns","_authUser","setTitle","setparticipantTarget","enqueueSnackbar","useSnackbar","authUser","useAuthUser","club","clubs","c","clubDate","year","semester","createConferenceMutation","useCreateConference","users","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","length","abrupt","mutateAsync","stop","apply","arguments","m","Helmet","Card","ConferenceInfo","fee","permission"],"sourceRoot":""}