{"version":3,"file":"static/js/381.b4edddc4.chunk.js","mappings":"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","sources":["content/club/Apply/index.tsx"],"sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport { useSnackbar } from 'notistack'\nimport { useEffect, useState } from 'react'\nimport { useAuthHeader, useAuthUser } from 'react-auth-kit'\nimport { Helmet } from 'react-helmet-async'\nimport { useNavigate, useParams } from 'react-router'\n\nimport {\n  Box,\n  Button,\n  FormControl,\n  InputLabel,\n  ListSubheader,\n  MenuItem,\n  TextField as MuiTextField,\n  Paper,\n  Select,\n  type SelectChangeEvent,\n  TextFieldProps,\n  TextareaAutosize,\n  Typography,\n  useMediaQuery\n} from '@mui/material'\nimport { styled, useTheme } from '@mui/material/styles'\n\nimport departments from 'src/data/departments'\nimport { HELPER_TEXT_MESSAGE } from 'src/data/messages'\n\nimport { formatLikePhoneNumber } from 'src/utils/formatLikePhoneNumber '\n\nimport { ClubMemberForAuth } from 'src/models/ClubMember'\nimport { Recruit } from 'src/models/Recruit'\n\nconst PageWrapper = styled(Box)(\n  () => `\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    `\n)\nconst CustomTextareaAutosize = styled(TextareaAutosize)`\n  padding: 8px;\n  width: 100%;\n  border-radius: 5px;\n  border: 1px solid lightgrey;\n  font-family: 'Pretendard';\n`\n\nconst TextField = (props: TextFieldProps) => <MuiTextField size=\"small\" required fullWidth {...props} />\n\ninterface FormAPIResponse extends AxiosResponse {\n  question1: string\n  question2: string\n  question3: string\n}\n\ninterface ApplyAPIResponse extends AxiosResponse {\n  answer1: string\n  answer2: string\n  answer3: string\n}\n\nconst Apply: React.FC = () => {\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.up('sm'))\n  const { enqueueSnackbar } = useSnackbar()\n  const [questions, setQuestions] = useState<string[]>([])\n  // TODO : id 달지 않고 들어오는 경우 처리\n  const { id } = useParams()\n  const clubId = Number(id)\n  const authHeader = useAuthHeader()\n  const navigate = useNavigate()\n  const authUser = useAuthUser()\n  const [values, setValues] = useState({\n    name: authUser()?.name,\n    phoneNumber: authUser()?.phoneNumber,\n    department: authUser()?.department,\n    answer1: '',\n    answer2: '',\n    answer3: ''\n  })\n\n  // 이미 회원인경우 접근 차단\n  const isMember = authUser()?.clubs.filter((c: ClubMemberForAuth) => c.id === clubId).length > 0\n  if (isMember) {\n    enqueueSnackbar('이미 가입된 동아리입니다.', { variant: 'error' })\n    navigate(-1)\n  }\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | SelectChangeEvent<string>\n  ) => {\n    const { name, value } = event.target\n    setValues(prevValues => ({ ...prevValues, [name]: value }))\n\n    if (event.target instanceof HTMLInputElement && event.target.name === 'name') {\n      const name = event.target\n      const trimmedName = name.value.trim()\n      const regex = /^[a-zA-Z0-9ㄱ-ㅎㅏ-ㅣ가-힣 ]*$/\n      const isValid = regex.test(name.value)\n\n      if (trimmedName !== name.value) {\n        name.setCustomValidity('이름 앞뒤에 공백문자를 포함할 수 없습니다.')\n        return\n      }\n      if (!isValid) {\n        name.setCustomValidity('이름에 특수문자를 포함할 수 없습니다.')\n        return\n      }\n      name.setCustomValidity('')\n    }\n  }\n  const handlePhoneNumberChange: React.ChangeEventHandler<HTMLTextAreaElement> = ({ target: { value } }) => {\n    setValues(prevState => ({ ...prevState, phoneNumber: formatLikePhoneNumber(value) }))\n  }\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = e => {\n    e.preventDefault()\n\n    const body = Object.assign({}, values)\n\n    axios\n      .post<ApplyAPIResponse>(`${process.env.REACT_APP_APIHOST}/apply/form?clubId=${clubId}`, body, {\n        headers: { Authorization: authHeader() }\n      })\n      .then(() => {\n        enqueueSnackbar('동아리에 지원서를 제출했어요! 좋은 결과 있기를 바라요 :)', { variant: 'success' })\n        navigate(`/club/${clubId}`)\n      })\n      .catch(err =>\n        enqueueSnackbar(err.response.data?.message ?? '서버에서 오류가 발생한 것 같아요. 다시 시도해주세요', {\n          variant: 'error'\n        })\n      )\n  }\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_APIHOST}/club/${clubId}/recruit/`)\n      .then((res: AxiosResponse<Recruit>) => {\n        const startAt = new Date(res.data.startAt)\n        const endAtNextDay = new Date(res.data.endAt)\n        const today = new Date()\n\n        // 마감일 23시 59분 59초까지 지원할 수 있도록 하루 더함\n        endAtNextDay.setDate(endAtNextDay.getDate() + 1)\n\n        // 지원 기간 내가 아닐 경우 접근 차단\n        if (!(startAt <= today && today <= endAtNextDay)) {\n          enqueueSnackbar('지금은 지원 기간이 아닙니다.', { variant: 'error' })\n          navigate(-1)\n        }\n      })\n      .catch(err => {\n        enqueueSnackbar(`${err.response.data?.message}`, { variant: 'error' })\n        navigate(-1)\n      })\n\n    // TODO : url 뒤에 / 떼면 301 Moved Permanently 에러뜸\n    axios\n      .get<FormAPIResponse>(`${process.env.REACT_APP_APIHOST}/club/${clubId}/form/`)\n      .then(res => {\n        const { question1, question2, question3 } = res.data\n        setQuestions([question1, question2, question3])\n      })\n      .catch(err =>\n        enqueueSnackbar(err.response.data?.message ?? '서버에서 오류가 발생한 것 같아요. 다시 시도해주세요', {\n          variant: 'error'\n        })\n      )\n  }, [])\n\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>동아리 지원</title>\n      </Helmet>\n      <Paper\n        square={matches ? false : true}\n        sx={{\n          my: theme.spacing(8),\n          padding: 3,\n          flex: 1,\n          maxWidth: '480px',\n          [theme.breakpoints.down('sm')]: {\n            my: 0,\n            py: 5,\n            maxWidth: '100%'\n          }\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h3\" sx={{ mb: 2, textAlign: 'center' }}>\n          동아리 지원서\n        </Typography>\n        <Box\n          component=\"form\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            '& .MuiTextField-root': { margin: 1 }\n          }}\n          onSubmit={handleSubmit}\n        >\n          <TextField\n            id=\"email\"\n            type=\"email\"\n            label=\"이메일\"\n            disabled\n            defaultValue={authUser()?.email}\n            inputProps={{ readOnly: true }}\n          />\n          <TextField\n            id=\"student-id\"\n            type=\"text\"\n            label=\"학번\"\n            disabled\n            defaultValue={authUser()?.studentId}\n            inputProps={{ readOnly: true }}\n          />\n          <TextField\n            id=\"name\"\n            name=\"name\"\n            type=\"text\"\n            label=\"이름\"\n            defaultValue={authUser()?.name}\n            onChange={handleChange}\n          />\n          <TextField\n            id=\"phone-number\"\n            name=\"phoneNumber\"\n            type=\"tel\"\n            label=\"전화번호\"\n            inputProps={{ pattern: '010-[0-9]{4}-[0-9]{4}' }}\n            defaultValue={authUser()?.phoneNumber}\n            helperText={HELPER_TEXT_MESSAGE.PHONE_NUMBER}\n            value={values.phoneNumber}\n            onChange={handlePhoneNumberChange}\n          />\n          <FormControl sx={{ margin: 1, width: '100%' }} size=\"small\" required>\n            <InputLabel htmlFor=\"department\">학과/학부</InputLabel>\n            <Select\n              id=\"department\"\n              name=\"department\"\n              label=\"학과/학부\"\n              defaultValue={authUser()?.department || ''}\n              onChange={handleChange}\n              fullWidth\n            >\n              {departments &&\n                Object.keys(departments).map(college => [\n                  <ListSubheader sx={{ fontWeight: 'bold' }}>{college}</ListSubheader>,\n                  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                  // @ts-ignore\n                  departments[college] &&\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    departments[college].map((depart: string) => [\n                      <MenuItem value={college === depart ? depart : college + ' ' + depart}>{depart}</MenuItem>\n                    ])\n                ])}\n            </Select>\n          </FormControl>\n          {!authUser()?.phoneNumber && (\n            <Box>\n              <Typography variant=\"body1\" display=\"inline\">\n                입력하신 정보는 동아리 관리를 위해 서버에 저장됩니다.\n              </Typography>\n            </Box>\n          )}\n\n          {questions?.filter(q => q).length > 0 && (\n            <>\n              <Typography variant=\"h6\" sx={{ marginTop: 1, marginBottom: theme.spacing(0.5) }}>\n                지원서 질문\n              </Typography>\n              {questions.map(\n                (q, i) =>\n                  q && (\n                    <Box width=\"100%\" key={q} sx={{ marginBottom: 1 }}>\n                      <Typography variant=\"subtitle1\" sx={{ marginBottom: theme.spacing(0.5), textAlign: 'left' }}>\n                        {q}\n                      </Typography>\n                      <CustomTextareaAutosize minRows={4} maxRows={6} name={`answer${i + 1}`} onChange={handleChange} />\n                    </Box>\n                  )\n              )}\n            </>\n          )}\n          <Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 1 }}>\n            지원서 제출\n          </Button>\n        </Box>\n      </Paper>\n    </PageWrapper>\n  )\n}\n\nexport default Apply\n"],"names":["PageWrapper","styled","Box","CustomTextareaAutosize","TextareaAutosize","_templateObject","_taggedTemplateLiteral","TextField","props","_jsx","MuiTextField","_objectSpread","size","required","fullWidth","_authUser","_authUser2","_authUser3","_authUser4","_authUser5","_authUser6","_authUser7","_authUser8","_authUser9","_authUser10","theme","useTheme","matches","useMediaQuery","breakpoints","up","enqueueSnackbar","useSnackbar","_useState","useState","_useState2","_slicedToArray","questions","setQuestions","id","useParams","clubId","Number","authHeader","useAuthHeader","navigate","useNavigate","authUser","useAuthUser","_useState3","name","phoneNumber","department","answer1","answer2","answer3","_useState4","values","setValues","clubs","filter","c","length","variant","handleChange","event","_event$target","target","value","prevValues","_defineProperty","HTMLInputElement","trimmedName","trim","isValid","test","setCustomValidity","useEffect","axios","concat","process","then","res","startAt","Date","data","endAtNextDay","endAt","today","setDate","getDate","catch","err","_err$response$data2","response","message","_res$data","question1","question2","question3","_err$response$data$me2","_err$response$data3","_jsxs","children","Helmet","Paper","square","sx","my","spacing","padding","flex","maxWidth","down","py","Typography","component","mb","textAlign","display","flexDirection","alignItems","margin","onSubmit","e","preventDefault","body","Object","assign","headers","Authorization","_err$response$data$me","_err$response$data","type","label","disabled","defaultValue","email","inputProps","readOnly","studentId","onChange","pattern","helperText","HELPER_TEXT_MESSAGE","_ref","prevState","formatLikePhoneNumber","FormControl","width","InputLabel","htmlFor","Select","departments","keys","map","college","ListSubheader","fontWeight","depart","MenuItem","q","_Fragment","marginTop","marginBottom","i","minRows","maxRows","Button","mt"],"sourceRoot":""}