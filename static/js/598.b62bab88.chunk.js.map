{"version":3,"file":"static/js/598.b62bab88.chunk.js","mappings":"sSAoBMA,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAClB,6GAOIE,EAAY,SAACC,GAAqB,OAAK,SAAC,KAAY,QAACC,KAAK,QAAQC,WAAS,GAAKF,GAAS,EAmH/F,UA5FA,WAAkB,IAAD,EACTG,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAQC,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,GAAcH,EAAMI,YAAYC,GAAG,OAC3CC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAER,GAA4BE,EAAAA,EAAAA,UAAS,CACnCC,MAAO,KACPC,SAAU,OACV,eAHKC,EAAM,KAAEC,EAAS,KAKlBC,EAAe,SAAAC,GACnB,IAAMC,GAAS,kBACVJ,GAAM,cACRG,EAAME,OAAOC,KAAOH,EAAME,OAAOE,QAEpCN,EAAUG,EACZ,EA2BA,OACE,UAAC1B,EAAW,YACV,SAAC,KAAM,WACL,2BAAO,0BAET,UAAC,IAAK,CACJ8B,QAAQjB,EACRkB,IAAE,GACAC,GAAIrB,EAAMsB,QAAQ,IAClBC,QAAS,EACTC,KAAM,EACNC,SAAU,UAAO,SAChBzB,EAAMI,YAAYsB,KAAK,MAAQ,CAC9BL,GAAI,EACJM,GAAI,EACJF,SAAU,UACX,kBACO,CAAEG,GAAI,OAAQC,GAAI,YAAW,GACrC,WAEF,SAAC,IAAU,CAACC,UAAU,KAAKC,QAAQ,KAAKX,GAAI,CAAEY,GAAI,EAAGC,UAAW,UAAW,SAAC,mCAG5E,UAAC,IAAG,CACFH,UAAU,OACVV,GAAI,CACFc,QAAS,OACTC,cAAe,SACfC,WAAY,SACZ,uBAAwB,CAAEC,OAAQ,IAEpCC,SAzDa,SAAAC,GACnBA,EAAEC,iBACFC,EAAAA,EAAAA,KACO,UAAsBC,0BAA6B,eAAe/B,GACtEgC,MAAK,SAAAC,GAEF9C,EAAO,CACL+C,MAAOD,EAAIE,KAAKC,YAChBC,UAAWC,KAAKC,KAAKC,SAASP,EAAIE,KAAKE,WAAa,IACpDI,UAAW,SACXC,WAAU,QAAGC,MAAOV,EAAIE,KAAKQ,OAAUV,EAAIE,KAAKS,MAChDC,aAAcZ,EAAIE,KAAKU,aACvBC,qBAAsBR,KAAKC,KAAKC,SAASP,EAAIE,KAAKY,uBAAyB,OAG7EpD,EAAgB,4DAAD,OAAqBsC,EAAIE,KAAKS,KAAKtC,KAAI,YAAO,CAAEc,QAAS,YACxEnC,EAAS,MACJU,EAAgB,iHAA6B,CAAEyB,QAAS,SACjE,IACC4B,OAAM,SAAAC,GAAG,eACRtD,EAA0C,QAA3B,EAAkB,QAAlB,EAACsD,EAAIC,SAASf,YAAI,aAAjB,EAAmBgB,eAAO,QAAI,8IAAiC,CAC7E/B,QAAS,SACT,GAER,EAiC+B,WAEvB,SAACvC,EAAS,CAACuE,GAAG,QAAQ9C,KAAK,QAAQ+C,KAAK,QAAQC,MAAM,qBAAMC,SAAUrD,KACtE,SAACrB,EAAS,CAACuE,GAAG,WAAW9C,KAAK,WAAW+C,KAAK,WAAWC,MAAM,2BAAOC,SAAUrD,KAChF,SAAC,IAAM,CAACmD,KAAK,SAASjC,QAAQ,YAAYpC,WAAS,EAACyB,GAAI,CAAE+C,GAAI,GAAI,SAAC,wBAGnE,SAAC,IAAI,CAACC,KAAK,iBAAiBhD,GAAI,CAAE+C,GAAI,GAAI,SAAC,4EAOrD,C","sources":["content/authentication/Login/index.tsx"],"sourcesContent":["import {\n  Box,\n  Paper,\n  Typography,\n  TextField as MuiTextField,\n  Button,\n  Link,\n  TextFieldProps,\n  styled,\n  useTheme,\n  useMediaQuery\n} from '@mui/material'\nimport { Helmet } from 'react-helmet-async'\n\nimport axios, { AxiosResponse } from 'axios'\nimport { useNavigate } from 'react-router'\nimport { useState } from 'react'\nimport { useSignIn } from 'react-auth-kit'\nimport { useSnackbar } from 'notistack'\n\nconst PageWrapper = styled(Box)(\n  () => `\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  `\n)\n\nconst TextField = (props: TextFieldProps) => <MuiTextField size=\"small\" fullWidth {...props} />\n\ninterface LoginAPIResponse extends AxiosResponse {\n  accessToken: string\n  expiresIn: string\n  refreshToken: string\n  refreshTokenExpiresIn: string\n  user: {\n    id: number\n    name: string\n    studentId: string\n    phoneNumber: string\n    email: string\n    department: string\n    nickname: string\n  }\n  clubs: {\n    id: number\n    name: string\n    isAdmin: boolean\n  }\n}\n\nfunction Login() {\n  const navigate = useNavigate()\n  const signIn = useSignIn()\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.up('sm'))\n  const { enqueueSnackbar } = useSnackbar()\n\n  const [values, setValues] = useState({\n    email: null,\n    password: null\n  })\n\n  const handleChange = event => {\n    const newValues = {\n      ...values,\n      [event.target.name]: event.target.value\n    }\n    setValues(newValues)\n  }\n  const handleSubmit = e => {\n    e.preventDefault()\n    axios\n      .post<LoginAPIResponse>(`${process.env.REACT_APP_APIHOST}/auth/login`, values)\n      .then(res => {\n        if (\n          signIn({\n            token: res.data.accessToken,\n            expiresIn: Math.ceil(parseInt(res.data.expiresIn) / 60),\n            tokenType: 'Bearer',\n            authState: { clubs: res.data.clubs, ...res.data.user },\n            refreshToken: res.data.refreshToken,\n            refreshTokenExpireIn: Math.ceil(parseInt(res.data.refreshTokenExpiresIn) / 60)\n          })\n        ) {\n          enqueueSnackbar(`KLUB에 오신 걸 환영해요, ${res.data.user.name} 님!`, { variant: 'success' })\n          navigate('/')\n        } else enqueueSnackbar('로그인에 실패했어요. 다시 시도해주세요 T.T', { variant: 'error' })\n      })\n      .catch(err =>\n        enqueueSnackbar(err.response.data?.message ?? '서버에서 오류가 발생한 것 같아요. 다시 시도해주세요', {\n          variant: 'error'\n        })\n      )\n  }\n\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>로그인</title>\n      </Helmet>\n      <Paper\n        square={matches ? false : true}\n        sx={{\n          my: theme.spacing(13),\n          padding: 3,\n          flex: 1,\n          maxWidth: '360px',\n          [theme.breakpoints.down('sm')]: {\n            my: 0,\n            py: 5,\n            maxWidth: '100%'\n          },\n          height: { xs: '90vh', sm: 'inherit' }\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h3\" sx={{ mb: 2, textAlign: 'center' }}>\n          KLUB에 로그인\n        </Typography>\n        <Box\n          component=\"form\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            '& .MuiTextField-root': { margin: 1 }\n          }}\n          onSubmit={handleSubmit}\n        >\n          <TextField id=\"email\" name=\"email\" type=\"email\" label=\"이메일\" onChange={handleChange} />\n          <TextField id=\"password\" name=\"password\" type=\"password\" label=\"비밀번호\" onChange={handleChange} />\n          <Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 1 }}>\n            로그인\n          </Button>\n          <Link href=\"/auth/register\" sx={{ mt: 1 }}>\n            아직 계정이 없으신가요?\n          </Link>\n        </Box>\n      </Paper>\n    </PageWrapper>\n  )\n}\n\nexport default Login\n"],"names":["PageWrapper","styled","Box","TextField","props","size","fullWidth","navigate","useNavigate","signIn","useSignIn","theme","useTheme","matches","useMediaQuery","breakpoints","up","enqueueSnackbar","useSnackbar","useState","email","password","values","setValues","handleChange","event","newValues","target","name","value","square","sx","my","spacing","padding","flex","maxWidth","down","py","xs","sm","component","variant","mb","textAlign","display","flexDirection","alignItems","margin","onSubmit","e","preventDefault","axios","process","then","res","token","data","accessToken","expiresIn","Math","ceil","parseInt","tokenType","authState","clubs","user","refreshToken","refreshTokenExpireIn","refreshTokenExpiresIn","catch","err","response","message","id","type","label","onChange","mt","href"],"sourceRoot":""}