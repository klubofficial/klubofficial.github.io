{"version":3,"file":"static/js/367.49bac7a4.chunk.js","mappings":"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","sources":["components/ConfirmDialog/index.tsx","content/authentication/Register/index.tsx"],"sourcesContent":["import { Box, Button, Dialog, Typography } from '@mui/material'\n\nconst ConfirmDialog = ({ open, handleClose, handleSubmit, confirmMessage = '정말 실행하시겠습니까?' }) => {\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <Box textAlign=\"center\" p={3}>\n        <Typography variant=\"h4\" color=\"primary\">\n          {confirmMessage}\n        </Typography>\n        <Box display=\"flex\" justifyContent=\"space-evenly\" mt={2}>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            취소\n          </Button>\n          <Button variant=\"contained\" color=\"error\" onClick={handleSubmit}>\n            확인\n          </Button>\n        </Box>\n      </Box>\n    </Dialog>\n  )\n}\n\nexport default ConfirmDialog\n","import {\n  Box,\n  Paper,\n  TextField as MuiTextField,\n  TextFieldProps,\n  Typography,\n  Button,\n  useMediaQuery,\n  Link,\n  Checkbox\n} from '@mui/material'\nimport { Helmet } from 'react-helmet-async'\n\nimport { styled, useTheme } from '@mui/material/styles'\nimport axios, { AxiosResponse } from 'axios'\nimport { useNavigate } from 'react-router'\nimport { useState } from 'react'\nimport { useSnackbar } from 'notistack'\nimport { PrivacyPolicy } from 'src/assets/PrivacyPolicy'\nimport ConfirmDialog from 'src/components/ConfirmDialog'\n\nconst PageWrapper = styled(Box)(\n  () => `\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  `\n)\n\nconst TextField = (props: TextFieldProps) => <MuiTextField size=\"small\" required fullWidth {...props} />\n\ninterface RegisterAPIResponse extends AxiosResponse {\n  id: number\n  studentId: string\n  email: string\n  nickname: string\n}\n\nfunction Register() {\n  const navigate = useNavigate()\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.up('sm'))\n  const { enqueueSnackbar } = useSnackbar()\n  const [checked, setChecked] = useState<boolean>(false)\n\n  const [values, setValues] = useState({\n    email: null,\n    password: null,\n    nickname: null,\n    studentId: null\n  })\n\n  const [confirmMode, setConfirmMode] = useState<boolean>(false)\n  const confirmMessage = `입력하신 학번은 ${values.studentId}입니다. 가입 이후엔 수정하실 수 없습니다.`\n\n  const handleChange = event => {\n    if (event.target.type === 'password') {\n      const password = document.getElementById('password') as HTMLInputElement\n      const confirmPassword = document.getElementById('confirm-password') as HTMLInputElement\n      if (password.value !== confirmPassword.value) confirmPassword.setCustomValidity(\"Passwords don't match\")\n      else confirmPassword.setCustomValidity('')\n    }\n    if (event.target.id !== 'confirm-password') {\n      const newValues = {\n        ...values,\n        [event.target.name]: event.target.value\n      }\n      setValues(newValues)\n    }\n  }\n\n  const dialogOpen = e => {\n    e.preventDefault()\n\n    if (!checked) {\n      enqueueSnackbar('개인정보 처리방침에 동의하셔야 서비스를 이용하실 수 있습니다.', {\n        variant: 'error'\n      })\n      return\n    }\n\n    setConfirmMode(true)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    axios\n      .post<RegisterAPIResponse>(`${process.env.REACT_APP_APIHOST}/auth/register`, values)\n      .then(() => {\n        enqueueSnackbar('KLUB의 일원이 되신 것을 환영해요! 이메일 확인 후 로그인해주세요 :)', { variant: 'success' })\n        navigate('/auth/login')\n      })\n      .catch(err =>\n        enqueueSnackbar(err.response.data?.message ?? '서버에서 오류가 발생한 것 같아요. 다시 시도해주세요', {\n          variant: 'error'\n        })\n      )\n  }\n\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>회원가입</title>\n      </Helmet>\n      <Paper\n        square={matches ? false : true}\n        sx={{\n          my: theme.spacing(8),\n          padding: 3,\n          flex: 1,\n          maxWidth: '480px',\n          [theme.breakpoints.down('sm')]: {\n            my: 0,\n            py: 5,\n            maxWidth: '100%'\n          }\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h3\" sx={{ mb: 2, textAlign: 'center' }}>\n          KLUB에 회원가입\n        </Typography>\n        <Box\n          component=\"form\"\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            '& .MuiTextField-root': { margin: 1 }\n          }}\n          onSubmit={dialogOpen}\n        >\n          <TextField\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            label=\"이메일\"\n            helperText=\"학교 이메일을 입력하세요.\"\n            onChange={handleChange}\n          />\n          <TextField id=\"password\" name=\"password\" type=\"password\" label=\"비밀번호\" onChange={handleChange} />\n          <TextField id=\"confirm-password\" type=\"password\" label=\"비밀번호 확인\" onChange={handleChange} />\n          <TextField id=\"nickname\" name=\"nickname\" type=\"text\" label=\"닉네임\" onChange={handleChange} />\n          <TextField\n            id=\"student-id\"\n            name=\"studentId\"\n            type=\"text\"\n            label=\"학번\"\n            helperText=\"학교에서 부여받은 학번을 입력하세요.\"\n            inputProps={{ pattern: '[0-9]{4}(KU|[0-9]{2})[0-9]{4}' }}\n            onChange={handleChange}\n          />\n          <Typography mt={1} fontWeight=\"bold\">\n            개인정보 처리방침\n          </Typography>\n          <Box sx={{ height: '20vh', overflowY: 'scroll', marginY: 2, backgroundColor: '#eeeeee', p: 1 }}>\n            <PrivacyPolicy />\n          </Box>\n          <Typography>\n            위 항목에 동의하십니까?\n            <Checkbox defaultChecked={false} onChange={e => setChecked(e.target.checked)} />\n          </Typography>\n\n          <Button type=\"submit\" variant=\"contained\" fullWidth sx={{ mt: 1 }}>\n            회원가입\n          </Button>\n          <Link href=\"/auth/login\" sx={{ mt: 1 }}>\n            이미 계정이 있으신가요?\n          </Link>\n        </Box>\n        <ConfirmDialog\n          open={confirmMode}\n          handleClose={() => setConfirmMode(false)}\n          handleSubmit={handleSubmit}\n          confirmMessage={confirmMessage}\n        />\n      </Paper>\n    </PageWrapper>\n  )\n}\n\nexport default Register\n"],"names":["open","handleClose","handleSubmit","confirmMessage","onClose","textAlign","p","variant","color","display","justifyContent","mt","onClick","PageWrapper","styled","Box","TextField","props","size","required","fullWidth","navigate","useNavigate","theme","useTheme","matches","useMediaQuery","breakpoints","up","enqueueSnackbar","useSnackbar","useState","checked","setChecked","email","password","nickname","studentId","values","setValues","confirmMode","setConfirmMode","handleChange","event","target","type","document","getElementById","confirmPassword","value","setCustomValidity","id","newValues","name","square","sx","my","spacing","padding","flex","maxWidth","down","py","component","mb","flexDirection","alignItems","margin","onSubmit","e","preventDefault","label","helperText","onChange","inputProps","pattern","fontWeight","height","overflowY","marginY","backgroundColor","defaultChecked","href","axios","process","then","catch","err","response","data","message"],"sourceRoot":""}