{"version":3,"file":"static/js/34.dca6bb2a.chunk.js","mappings":"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","sources":["components/CancelSubmitBtns/index.tsx","content/manage/Conference/ConferenceRegister.tsx","data/semester.ts","utils/date.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\n\nimport { Button, Stack } from '@mui/material'\n\ninterface CancelSubmitBtnsProps {\n  handleSubmit: React.MouseEventHandler<HTMLButtonElement>\n  handleCancel?: React.MouseEventHandler<HTMLButtonElement>\n  displayCancelBtn?: boolean\n  submitBtnText?: string\n  cancelBtnText?: string\n}\n\nconst CancelSubmitBtns: React.FC<CancelSubmitBtnsProps> = ({\n  handleSubmit,\n  handleCancel,\n  displayCancelBtn = true,\n  submitBtnText = '등록',\n  cancelBtnText = '취소'\n}: CancelSubmitBtnsProps) => {\n  const navigate = useNavigate()\n\n  const _handleCancel: React.MouseEventHandler<HTMLButtonElement> = event => {\n    if (handleCancel === undefined) navigate(-1)\n    else handleCancel(event)\n  }\n\n  return (\n    <Stack mt={2} pb={2} direction=\"row\" spacing={2} justifyContent=\"center\">\n      {displayCancelBtn && (\n        <Button color=\"error\" variant=\"outlined\" sx={{ width: '50%', maxWidth: '120px' }} onClick={_handleCancel}>\n          {cancelBtnText}\n        </Button>\n      )}\n\n      <Button color=\"success\" variant=\"contained\" onClick={handleSubmit} sx={{ width: '50%', maxWidth: '120px' }}>\n        {submitBtnText}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default CancelSubmitBtns\n","import axios, { AxiosResponse } from 'axios'\nimport dayjs, { Dayjs } from 'dayjs'\nimport { useSnackbar } from 'notistack'\nimport { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport { useAuthHeader } from 'react-auth-kit'\nimport { Helmet } from 'react-helmet-async'\nimport { useNavigate, useParams } from 'react-router-dom'\n\nimport MobileDatePicker from '@mui/lab/MobileDatePicker'\nimport {\n  Box,\n  Card,\n  Checkbox,\n  Chip,\n  Grid,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography\n} from '@mui/material'\n\nimport { dateParams } from 'src/utils/date'\n\nimport { type Member } from 'src/models/member'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport { PureLightTheme } from 'src/theme/schemes/PureLightTheme'\n\nconst ChipHeader = (\n  numStack: number,\n  numChip: number,\n  chipWidth: number,\n  levels: string[],\n  selectedAllLevel: (level: string) => boolean,\n  handleSelectLevelMembers: (level: string) => void\n): JSX.Element[] => {\n  const chipStack = []\n  const levelLength = levels.length\n  for (let i = 0; i < numStack; i++) {\n    if (i * numChip < levelLength) {\n      chipStack.push(\n        <Stack direction=\"row\" sx={{ marginBottom: i === numStack - 1 ? 0 : 0.5 }} key={i}>\n          {levels.slice(i * numChip, i * numChip + numChip).map(level => {\n            return (\n              <Chip\n                label={level}\n                key={level}\n                sx={{ marginRight: 0.5, width: `${chipWidth}px` }}\n                variant={selectedAllLevel(level) ? 'filled' : 'outlined'}\n                onClick={() => handleSelectLevelMembers(level)}\n              />\n            )\n          })}\n        </Stack>\n      )\n    }\n  }\n\n  return chipStack\n}\n\nconst ConferenceRegister = () => {\n  const [title, setTitle] = useState<string>('')\n  const [date, setDate] = useState<Dayjs | null>(dayjs('2023-01-01T00:00:00'))\n  const [members, setMembers] = useState<Member[]>([])\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n  const [levels, setLevels] = useState<string[]>([])\n  const [selectedLevel, setSelectedLevel] = useState<string[]>([])\n  const [isPausedListing, setIsPausedListing] = useState<boolean>(true)\n  const params = useParams()\n  const navigate = useNavigate()\n  const { enqueueSnackbar } = useSnackbar()\n  const authHeader = useAuthHeader()\n\n  const tableRef = useRef<HTMLDivElement>(null)\n  const [tableWidth, setTableWidth] = useState(0)\n  const CHIP_WIDTH = 87\n  const NUM_OF_CHIP_STACK = Math.ceil((levels.length * CHIP_WIDTH) / (tableWidth - 76))\n  const NUM_OF_CHIP_PER_STACK = Math.ceil((tableWidth - 76) / CHIP_WIDTH)\n\n  const getTableWidth = () => {\n    if (tableRef.current) {\n      setTableWidth(tableRef.current.clientWidth)\n    }\n  }\n\n  const selectedSomeMembers = selectedMembers.length > 0 && selectedMembers.length < members.length\n  const selectedAllMembers = selectedMembers.length === members.length\n\n  // 해당 level에 해당하는 모든 member가 선택되었는지 아닌지 체크 -> chip의 variant 변경 시 사용\n  const selectedAllLevel = (level: string): boolean => {\n    const levelMembers = members.filter((member: Member) => member.level === level).map((member: Member) => member.id)\n    // 각 level에 해당하는 모든 member들 중 selected된 member를 제외한 리스트 즉, selected되지 못한 member\n    const notSelectedMember = levelMembers.filter(memberId => !selectedMembers.includes(memberId))\n    return selectedLevel.includes(level) && !notSelectedMember.length\n  }\n\n  const handleSelectAllMembers: React.ChangeEventHandler<HTMLInputElement> = event => {\n    setSelectedMembers(event.target.checked ? members && members.map(member => member.id) : [])\n    setSelectedLevel(event.target.checked ? levels : [])\n  }\n\n  const handleSelectOneMember = (_event: ChangeEvent<HTMLInputElement>, memberId: number): void => {\n    const level = members.filter((member: Member) => member.id === memberId).map((member: Member) => member.level)[0]\n    if (!selectedMembers.includes(memberId)) {\n      setSelectedLevel(prevSelected => Array.from(new Set([...prevSelected, level])))\n      setSelectedMembers(prevSelected => [...prevSelected, memberId])\n    } else {\n      if (\n        members.filter((member: Member) => member.level === level && selectedMembers.includes(member.id)).length === 1\n      )\n        setSelectedLevel(prevSelected => prevSelected.filter(lv => lv !== level))\n\n      setSelectedMembers(prevSelected => prevSelected.filter(id => id !== memberId))\n    }\n  }\n\n  // 각 level에 해당하는 chip을 선택 또는 해제했을 때 적용\n  const handleSelectLevelMembers = (level: string): void => {\n    const levelMembers = members.filter((member: Member) => member.level === level).map((member: Member) => member.id)\n    if (!selectedLevel.includes(level)) {\n      setSelectedLevel(prevSelected => [...prevSelected, level])\n      setSelectedMembers(prevSelected => Array.from(new Set([...prevSelected, ...levelMembers])))\n    } else {\n      setSelectedLevel(prevSelected => prevSelected.filter(lv => lv !== level))\n      setSelectedMembers(prevSelected => prevSelected.filter(memberId => !levelMembers.includes(memberId)))\n    }\n  }\n\n  const handleSubmit = async () => {\n    if (title.length > 50) {\n      enqueueSnackbar('행사명은 50자 이내로 작성해 주십시오.', { variant: 'error' })\n      return\n    }\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_APIHOST}/club/${params.id}/conference`,\n        {\n          conference: { clubId: params.id, title: title, startAt: date, user: selectedMembers }\n        },\n        {\n          params: dateParams,\n          headers: { Authorization: authHeader() }\n        }\n      )\n\n      if (data.message === 'ok') {\n        enqueueSnackbar('등록이 완료되었습니다.', { variant: 'success' })\n        navigate(`/manage/${params.id}/attendance`)\n      } else {\n        enqueueSnackbar('오류가 발생했습니다. 다시 시도해 주십시오.', { variant: 'error' })\n      }\n    } catch (e) {\n      enqueueSnackbar('오류가 발생했습니다. 다시 시도해 주십시오.', { variant: 'error' })\n    }\n  }\n\n  const handleIsPausedChange: React.ChangeEventHandler<HTMLInputElement> = e => {\n    setIsPausedListing(() => e.target.checked)\n  }\n\n  useEffect(() => {\n    setTableWidth(tableRef.current?.clientWidth || 450)\n    axios\n      .get(`${process.env.REACT_APP_APIHOST}/club/${params.id}/member`, {\n        headers: { Authorization: authHeader() }\n      })\n      .then((res: AxiosResponse<Member[]>) => {\n        const activeMembers = res.data.filter(member => member.deletedAt === null && member.firedAt === null)\n        activeMembers.sort((a, b) => (a.name < b.name ? -1 : 1))\n        setMembers(activeMembers)\n\n        const levels = Array.from(\n          new Set(activeMembers.filter((member: Member) => member.level !== null).map((member: Member) => member.level))\n        ).sort()\n        setLevels(levels)\n      })\n  }, [])\n\n  useEffect(() => {\n    window.addEventListener('resize', getTableWidth)\n  }, [])\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>출석 관리</title>\n      </Helmet>\n      <Card>\n        <Grid container sx={{ justifyContent: 'center' }}>\n          <Grid item xs={12} md={6}>\n            <Box padding={{ xs: 3, md: 6 }} paddingBottom={{ xs: 0 }}>\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n                행사명\n              </Typography>\n              <TextField required id=\"title\" label=\"행사명\" onChange={e => setTitle(e.target.value)} fullWidth />\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n                행사일\n              </Typography>\n              <MobileDatePicker\n                label=\"행사일\"\n                inputFormat=\"yyyy/MM/dd\"\n                value={date}\n                onChange={newValue => {\n                  setDate(newValue)\n                }}\n                renderInput={params => <TextField {...params} sx={{ width: '100%' }} />}\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Box padding={{ xs: 3, md: 6 }}>\n              <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mt={1} mb={-0.5}>\n                <Box display=\"flex\">\n                  <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} display=\"inline-block\">\n                    {'참여인원 '}\n                    <Typography variant=\"caption\" fontSize={1} display=\"inline-block\">\n                      가나다순\n                    </Typography>\n                  </Typography>\n                </Box>\n                <Box>\n                  <Typography display=\"inline-block\" variant=\"body1\">\n                    휴회원 포함\n                  </Typography>\n                  <Checkbox\n                    sx={{ padding: '5px' }}\n                    size=\"small\"\n                    checked={isPausedListing}\n                    onChange={handleIsPausedChange}\n                  />\n                </Box>\n              </Box>\n              <Typography variant=\"caption\">ctrl + f 로 검색하실 수 있습니다</Typography>\n\n              <TableContainer sx={{ maxHeight: '45vh', overflow: 'scroll' }} ref={tableRef}>\n                <Table stickyHeader>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={selectedAllMembers}\n                          indeterminate={selectedSomeMembers}\n                          onChange={handleSelectAllMembers}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        {levels\n                          ? ChipHeader(\n                              NUM_OF_CHIP_STACK,\n                              NUM_OF_CHIP_PER_STACK,\n                              CHIP_WIDTH,\n                              levels,\n                              selectedAllLevel,\n                              handleSelectLevelMembers\n                            )\n                          : '이름 | 등급'}\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {members &&\n                      members.map(member => {\n                        if (!isPausedListing && member.isPaused) {\n                          return\n                        }\n\n                        const isMemberSelected = selectedMembers.includes(member.id)\n\n                        return (\n                          <TableRow hover key={member.id} selected={isMemberSelected}>\n                            <TableCell padding=\"checkbox\">\n                              <Checkbox\n                                color=\"primary\"\n                                checked={isMemberSelected}\n                                onChange={(event: ChangeEvent<HTMLInputElement>): void =>\n                                  handleSelectOneMember(event, member.id)\n                                }\n                                value={isMemberSelected}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <Typography variant=\"body1\" fontWeight=\"bold\" color=\"text.primary\" gutterBottom noWrap>\n                                <Box style={{ display: 'flex', alignItems: 'baseline' }}>\n                                  {member.level ? `${member.name} | ${member.level}` : member.name}\n                                </Box>\n                              </Typography>\n                              <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                                {member.studentId}\n                              </Typography>\n                            </TableCell>\n                          </TableRow>\n                        )\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </Grid>\n        </Grid>\n        <CancelSubmitBtns handleSubmit={handleSubmit} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default ConferenceRegister\n","export const FIRST_SEMESTER_MONTH = 2\nexport const SECOND_SEMESTER_MONTH = 8\n\nexport const FIRST_SEMESTER = 'SPRING'\nexport const SECOND_SEMESTER = 'FALL'\n\nexport const FIRST_SEMESTER_NAME = '1학기'\nexport const SECOND_SEMESTER_NAME = '2학기'\n","import {\n  FIRST_SEMESTER,\n  FIRST_SEMESTER_MONTH,\n  FIRST_SEMESTER_NAME,\n  SECOND_SEMESTER,\n  SECOND_SEMESTER_MONTH,\n  SECOND_SEMESTER_NAME\n} from 'src/data/semester'\n\nexport const dateParams = {\n  semester: window.localStorage.getItem('semester'),\n  year: window.localStorage.getItem('year')\n}\n\nexport interface DateProps {\n  semester: Semester\n  year: number\n}\n\nexport type Semester = 'SPRING' | 'FALL'\n\nexport const STORAGE_KEY = {\n  SEMESTER: 'semester',\n  YEAR: 'year'\n}\n\nexport const getSemesterName = (semester: string): '1학기' | '2학기' => {\n  const isFirstSemester = semester === FIRST_SEMESTER\n  return isFirstSemester ? FIRST_SEMESTER_NAME : SECOND_SEMESTER_NAME\n}\n\nexport const getCurrentSemester = (): Semester => {\n  const today = new Date()\n  const currentMonth = today.getMonth()\n  const isFirstSemester = FIRST_SEMESTER_MONTH <= currentMonth && currentMonth < SECOND_SEMESTER_MONTH\n  return isFirstSemester ? FIRST_SEMESTER : SECOND_SEMESTER\n}\n\nexport const getCurrentYear = () => {\n  return new Date().getFullYear()\n}\n"],"names":["_ref","handleSubmit","handleCancel","_ref$displayCancelBtn","displayCancelBtn","_ref$submitBtnText","submitBtnText","_ref$cancelBtnText","cancelBtnText","navigate","useNavigate","_jsxs","Stack","mt","pb","direction","spacing","justifyContent","children","_jsx","Button","color","variant","sx","width","maxWidth","onClick","event","undefined","ChipHeader","numStack","numChip","chipWidth","levels","selectedAllLevel","handleSelectLevelMembers","chipStack","levelLength","length","i","push","marginBottom","slice","map","level","Chip","label","marginRight","concat","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","dayjs","_useState4","date","setDate","_useState5","_useState6","members","setMembers","_useState7","_useState8","selectedMembers","setSelectedMembers","_useState9","_useState10","setLevels","_useState11","_useState12","selectedLevel","setSelectedLevel","_useState13","_useState14","isPausedListing","setIsPausedListing","params","useParams","enqueueSnackbar","useSnackbar","authHeader","useAuthHeader","tableRef","useRef","_useState15","_useState16","tableWidth","setTableWidth","NUM_OF_CHIP_STACK","Math","ceil","NUM_OF_CHIP_PER_STACK","getTableWidth","current","clientWidth","selectedSomeMembers","selectedAllMembers","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$post","wrap","_context","prev","next","abrupt","axios","process","id","conference","clubId","startAt","user","dateParams","headers","Authorization","sent","data","message","t0","stop","apply","arguments","useEffect","_tableRef$current","then","res","activeMembers","filter","member","deletedAt","firedAt","sort","a","b","name","Array","from","Set","window","addEventListener","Box","m","Helmet","Card","Grid","container","item","xs","md","padding","paddingBottom","Typography","PureLightTheme","margin","TextField","required","onChange","e","target","value","fullWidth","MobileDatePicker","inputFormat","newValue","renderInput","_objectSpread","display","alignItems","mb","fontSize","Checkbox","size","checked","TableContainer","maxHeight","overflow","ref","Table","stickyHeader","TableHead","TableRow","TableCell","indeterminate","notSelectedMember","memberId","includes","levelMembers","prevSelected","lv","_toConsumableArray","TableBody","isPaused","isMemberSelected","hover","selected","_event","handleSelectOneMember","fontWeight","gutterBottom","noWrap","style","studentId","CancelSubmitBtns","FIRST_SEMESTER_MONTH","SECOND_SEMESTER_MONTH","FIRST_SEMESTER","SECOND_SEMESTER","FIRST_SEMESTER_NAME","SECOND_SEMESTER_NAME","semester","localStorage","getItem","year","STORAGE_KEY","SEMESTER","YEAR","getSemesterName","getCurrentSemester","currentMonth","Date","getMonth","getCurrentYear","getFullYear"],"sourceRoot":""}