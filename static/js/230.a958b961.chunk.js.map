{"version":3,"file":"static/js/230.a958b961.chunk.js","mappings":"qJAsBA,IApBsB,SAAH,GAA8E,IAAxEA,EAAI,EAAJA,KAAMC,EAAW,EAAXA,YAAaC,EAAY,EAAZA,aAAa,EAAD,EAAEC,eAAAA,OAAc,MAAG,iEAAc,EACvF,OACE,SAAC,IAAM,CAACH,KAAMA,EAAMI,QAASH,EAAY,UACvC,UAAC,IAAG,CAACI,UAAU,SAASC,EAAG,EAAE,WAC3B,SAAC,IAAU,CAACC,QAAQ,KAAKC,MAAM,UAAS,SACrCL,KAEH,UAAC,IAAG,CAACM,QAAQ,OAAOC,eAAe,eAAeC,GAAI,EAAE,WACtD,SAAC,IAAM,CAACJ,QAAQ,WAAWK,QAASX,EAAY,SAAC,kBAGjD,SAAC,IAAM,CAACM,QAAQ,YAAYC,MAAM,QAAQI,QAASV,EAAa,SAAC,wBAO3E,C,wRC8EA,EAlFuB,SAAH,GAAiG,IAA3FW,EAAK,EAALA,MAAOC,EAAK,EAALA,MAAOC,EAAa,EAAbA,cAAeC,EAAgB,EAAhBA,iBAAkBC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAAYC,EAAW,EAAXA,YAC1FC,EAAyBL,EAAcM,OAAS,GAAKN,EAAcM,OAASR,EAAMQ,OAClFC,EAAwBP,EAAcM,SAAWR,EAAMQ,OACvDE,EAAsBR,EAAcM,OAAS,EAcnD,OACE,UAACG,EAAA,EAAI,WACFD,GACC,UAACE,EAAA,EAAG,CAACC,OAAO,OAAM,WAChB,SAACD,EAAA,EAAG,CAACE,KAAM,EAAGrB,EAAG,EAAE,SAChBW,IACI,QAGT,SAACW,EAAA,EAAU,CAACd,MAAOA,KAGrB,SAACe,EAAA,EAAO,KACR,SAACC,EAAA,EAAc,CAACC,GAAI,CAAEL,OAAQ,QAAS,UACrC,UAACM,EAAA,EAAK,YACJ,SAACC,EAAA,EAAS,WACR,UAACC,EAAA,EAAQ,YACP,SAACC,EAAA,EAAS,CAACC,QAAQ,WAAU,UAC3B,SAACC,EAAA,EAAQ,CACP7B,MAAM,UACN8B,QAAShB,EACTiB,cAAenB,EACfoB,SAlCkB,SAACC,GACjCzB,EAAiByB,EAAMC,OAAOJ,QAAUzB,GAASA,EAAM8B,KAAI,SAAA9B,GAAK,OAAIA,EAAM+B,EAAE,IAAI,GAClF,MAmCa1B,EAAWyB,KAAI,SAAAE,GACd,OAAO,SAACV,EAAA,EAAS,UAAEU,EAASC,QAC9B,UAGJ,SAACC,EAAA,EAAS,UACPlC,GACCA,EAAM8B,KAAI,SAACK,EAAMC,GACf,IAAMC,EAAiBnC,EAAcoC,SAASH,EAAKJ,IACnD,OACE,UAACV,EAAA,EAAQ,CAACkB,OAAK,EAAeR,GAAII,EAAKJ,GAAIhC,QAAS,WAAOO,EAAY8B,EAAE,EAAE,WACzE,SAACd,EAAA,EAAS,CAACC,QAAQ,WAAU,UAC3B,SAACC,EAAA,EAAQ,CACP7B,MAAM,UACN8B,QAASY,EACTtC,QAAS,SAAAyC,GAAC,OAAIA,EAAEC,iBAAiB,EACjCd,SAAU,SAACC,GAAoC,OAjDGc,EAiDkCP,EAAKJ,QAhDxG7B,EAAcoC,SAASI,GAG1BvC,GAAiB,SAAAwC,GAAY,OAAIA,EAAaC,QAAO,SAAAb,GAAE,OAAIA,IAAOW,CAAM,GAAC,IAFzEvC,GAAiB,SAAAwC,GAAY,wBAAQA,GAAY,CAAED,GAAM,KAF5B,IAAuCA,CAiD0C,EAC5FG,MAAOR,MAIVhC,EAAWyB,KAAI,SAACE,EAAUc,GACzB,OACE,SAACxB,EAAA,EAAS,CAACJ,GAAI,CAAE6B,OAAQ,WAAY,UACnC,SAACC,EAAA,EAAU,CAACtD,QAAQ,QAAQuD,WAAsB,IAAVH,GAAe,OAAQI,cAAY,EAACC,QAAM,WAC/EhB,EAAKH,EAASA,aAIvB,MAnBmBG,EAAKJ,GAsB9B,aAMd,E,yDCpFMqB,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAClB,gBAAGE,EAAK,EAALA,MAAK,mCACSA,EAAMC,OAAOC,MAAMC,KAAI,0BAC5BH,EAAMI,QAAQF,MAAMG,aAAY,oDAGxBL,EAAMC,OAAOC,MAAMI,KAAI,sBAKvCC,GAAgBT,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EACpB,gBAAGE,EAAK,EAALA,MAAK,qCACWA,EAAMC,OAAOO,QAAQL,KAAI,4BAC9BH,EAAMI,QAAQI,QAAQH,aAAY,0DAG1BL,EAAMC,OAAOO,QAAQF,KAAI,0BAuFjD,I,EAAA,EAtEA,SAAqB,GAAyD,IAAvDG,EAAkB,EAAlBA,mBAAoBC,EAAY,EAAZA,aACnCC,GAAaC,EAAAA,EAAAA,MACXC,GAAoBC,EAAAA,EAAAA,MAApBD,gBACFE,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACf,GAAgCC,EAAAA,EAAAA,YAAmB,eAA5CC,EAAQ,KAAEC,EAAW,KAC5B,GAAoCF,EAAAA,EAAAA,UAAqB,QAAO,eAAzDG,EAAU,KAAEC,EAAa,KAY1BxE,EAAc,SAACuE,GACnB,IAAME,EAAmBf,EAAmBlC,KAAI,SAAAC,GAC9C,MAAO,CACLiD,OAAQjD,EACRkD,OAAQJ,EAEZ,IACAxF,EAAa0F,EACf,EAEM1F,EAAe,SAAC0F,GACpBG,EAAAA,EAAAA,IACO,GAAD,OAAIC,0BAA6B,iCAAyBX,EAAOzC,IAAMgD,EAAkB,CAC3FK,QAAS,CAAEC,cAAenB,OAE3BoB,MAAK,SAAAC,GACJ,GAAyB,OAArBA,EAAIC,KAAKC,QAIX,MAAM,IAAIC,MAHVtB,EAAgB,6EAAkB,CAAE1E,QAAS,YAC7CuE,EAAeA,IAAiBK,GAAU,EAI9C,IACCqB,OAAM,SAAAC,GAAQ,IAAD,EACZxB,EAAgB,GAAD,OAAqB,QAArB,EAAIwB,EAAIC,SAASL,YAAI,aAAjB,EAAmBC,QAAO,8DAAiB,CAAE/F,QAAS,SAC3E,GACJ,EAEA,OACE,iCACE,SAACkB,EAAA,EAAG,CAAChB,QAAQ,OAAOkG,WAAW,SAASjG,eAAe,gBAAe,UACpE,UAACe,EAAA,EAAG,CAAChB,QAAQ,OAAOkG,WAAW,SAAQ,WACrC,SAAC1C,EAAW,CAAClC,GAAI,CAAE6E,GAAI,GAAKC,WAAW,SAACC,EAAA,EAAoB,IAAKvG,QAAQ,YAAYK,QA1C1E,WACjB+E,EAAc,QACdF,GAAY,EACd,EAuCiH,SAAC,wBAG1G,SAACd,EAAa,CAAC5C,GAAI,CAAE6E,GAAI,GAAKC,WAAW,SAACE,EAAA,EAAsB,IAAKxG,QAAQ,YAAYK,QAxC9E,WACjB+E,EAAc,QACdF,GAAY,EACd,EAqCqH,SAAC,uBAKlH,SAACuB,EAAA,EAAa,CACZhH,KAAMwF,EACNvF,YAAa,WACXwF,GAAY,EACd,EACAvF,aAAc,kBAAMiB,EAAYuE,EAAW,EAC3CvF,eAAc,uBAAqB,SAAbuF,EAAsB,SAAM,GAAE,sEAI5D,E,qEChGMuB,EAAQ,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,MACPC,SAAU,QACVC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXpH,EAAG,GAGCqH,GAAyBzD,EAAAA,EAAAA,IAAO0D,EAAAA,EAAP1D,CAAwB,mKA0HvD,EAjHkB,SAAH,GAA2E,IAAD,gBAApElE,EAAI,EAAJA,KAAMI,EAAO,EAAPA,QAASyH,EAAS,EAATA,UAAWC,EAAU,EAAVA,WAAYC,EAAO,EAAPA,QACzD,GAAgDxC,EAAAA,EAAAA,UAAiBwC,GAAQ,eAAlEC,EAAgB,KAAEC,EAAmB,KACtCC,EAAqBJ,EAAWzG,OAEhC+C,GAAQ+D,EAAAA,EAAAA,KACRC,GAAUC,EAAAA,EAAAA,GAAcjE,EAAMkE,YAAYC,GAAG,QAEnDC,EAAAA,EAAAA,YAAU,WACRP,EAAoBF,EACtB,GAAG,CAAC/H,IAEJ,IAAMyI,EAAsB,WAC1BR,GAAqBD,EAAmB,GAAKE,EAC/C,EAEMQ,EAAsB,WAExBT,EADuB,IAArBD,EACkBE,EAAqB,EAErBF,EAAmB,EAE3C,EAEA,OACE,SAACW,EAAA,EAAK,CAAC3I,KAAMA,EAAMI,QAASA,EAAQ,UAClC,UAACqB,EAAA,EAAG,CAACM,GAAIkF,EAAM,WACb,UAACxF,EAAA,EAAG,CAACf,eAAe,SAAQ,WAC1B,UAACmD,EAAA,EAAU,CAACtD,QAAQ,KAAKwB,GAAI,CAAE1B,UAAW,UAAW,UACtB,QADsB,EAClDyH,EAAWE,UAAiB,aAA5B,EAA8BY,KAAK,wCAEtC,UAAC/E,EAAA,EAAU,CAACtD,QAAQ,YAAYwB,GAAI,CAAE8G,GAAI,EAAGxI,UAAW,UAAW,UACpC,QADoC,EAChEyH,EAAWE,UAAiB,aAA5B,EAA8Bc,UAAU,MAAgC,QAA7B,EAAChB,EAAWE,UAAiB,aAA5B,EAA8Be,kBAG/E,UAACtH,EAAA,EAAG,CAAChB,QAAQ,OAAOkG,WAAW,SAASjG,eAAe,eAAc,UAClE0H,IACC,SAACjE,EAAA,EAAM,CAACvD,QAAS8H,EAAoB,UACnC,SAACM,EAAA,EAAkB,OAIvB,UAACvH,EAAA,EAAG,CAAC6F,MAAOc,EAAU,MAAQ,MAAM,UACjCP,EAAUoB,YACT,UAACxH,EAAA,EAAG,YACF,SAACoC,EAAA,EAAU,CAACtD,QAAQ,YAAW,SAAEsH,EAAUoB,aAC3C,SAACtB,EAAsB,CACrBuB,QAAS,EACTC,QAAS,EACTzF,MAAmC,QAA9B,EAAEoE,EAAWE,UAAiB,aAA5B,EAA8BoB,QACrCC,UAAQ,OAIbxB,EAAUyB,YACT,UAAC7H,EAAA,EAAG,YACF,SAACoC,EAAA,EAAU,CAACtD,QAAQ,YAAW,SAAEsH,EAAUyB,aAC3C,SAAC3B,EAAsB,CACrBuB,QAAS,EACTC,QAAS,EACTzF,MAAmC,QAA9B,EAAEoE,EAAWE,UAAiB,aAA5B,EAA8BuB,QACrCF,UAAQ,OAIbxB,EAAU2B,YACT,UAAC/H,EAAA,EAAG,YACF,SAACoC,EAAA,EAAU,CAACtD,QAAQ,YAAW,SAAEsH,EAAU2B,aAC3C,SAAC7B,EAAsB,CACrBuB,QAAS,EACTC,QAAS,EACTzF,MAAmC,QAA9B,EAAEoE,EAAWE,UAAiB,aAA5B,EAA8ByB,QACrCJ,UAAQ,UAKfjB,IACC,SAACjE,EAAA,EAAM,CAACvD,QAAS6H,EAAoB,UACnC,SAACiB,EAAA,EAAgB,SAKtBtB,GACC,UAAC3G,EAAA,EAAG,CAACkI,UAAW,EAAGlJ,QAAQ,OAAOC,eAAe,SAAQ,WACvD,SAAC,EAAW,CAACmE,mBAAoB,CAA6B,QAA7B,EAACiD,EAAWE,UAAiB,aAA5B,EAA8BpF,IAAKkC,aAAc1E,KACnF,SAAC+D,EAAA,EAAM,CAAC5D,QAAQ,WAAWK,QAASR,EAAS2B,GAAI,CAAE6E,GAAI,EAAGjG,IAAKyH,GAAW,GAAI,SAAC,qBAKjF,iCACE,SAAC3G,EAAA,EAAG,CAACkI,UAAW,EAAGlJ,QAAQ,OAAOC,eAAe,SAAQ,UACvD,SAAC,EAAW,CAACmE,mBAAoB,CAA6B,QAA7B,EAACiD,EAAWE,UAAiB,aAA5B,EAA8BpF,IAAKkC,aAAc1E,OAErF,UAACqB,EAAA,EAAG,CAAChB,QAAQ,OAAOC,eAAe,eAAeqB,GAAI,CAAEpB,GAAI,GAAI,WAC9D,SAACwD,EAAA,EAAM,CAACvD,QAAS8H,EAAoB,UACnC,SAACM,EAAA,EAAkB,OAErB,SAAC7E,EAAA,EAAM,CAAC5D,QAAQ,WAAWK,QAASR,EAAQ,SAAE,kBAG9C,SAAC+D,EAAA,EAAM,CAACvD,QAAS6H,EAAoB,UACnC,SAACiB,EAAA,EAAgB,gBAQjC,ECrDA,EApF4B,WAC1B,OAAoCnE,EAAAA,EAAAA,UAAsB,IAAG,eAAtDqE,EAAU,KAAEC,EAAa,KAChC,GAAoDtE,EAAAA,EAAAA,UAAmB,IAAG,eAAnEV,EAAkB,KAAEiF,EAAqB,KAChD,GAAkCvE,EAAAA,EAAAA,UAAe,CAAE0D,UAAW,GAAIK,UAAW,GAAIE,UAAW,KAAK,eAA1F3B,EAAS,KAAEkC,EAAY,KAC9B,GAA8BxE,EAAAA,EAAAA,WAAkB,GAAM,eAA/CyE,EAAO,KAAEC,EAAU,KAE1B,GAAgD1E,EAAAA,EAAAA,UAAiB,GAAE,eAA5D2E,EAAgB,KAAEC,EAAmB,KACtCpF,GAAaC,EAAAA,EAAAA,MACbG,GAAWC,EAAAA,EAAAA,MASXC,GAASC,EAAAA,EAAAA,MAqBf,OAdAkD,EAAAA,EAAAA,YAAU,WACRzC,EAAAA,EAAAA,IACO,GAAD,OAAIC,0BAA6B,6BAAqBX,EAAOzC,IAAM,CACrEqD,QAAS,CAAEC,cAAenB,OAE3BoB,MAAK,SAACC,GACLyD,EAAczD,EAAIC,KACpB,IAEFN,EAAAA,EAAAA,IAAU,GAAD,OAAIC,0BAA6B,6BAAqBX,EAAOzC,KAAMuD,MAAK,SAACC,GAChF2D,EAAa3D,EAAIC,KACnB,GACF,GAAG,KAGD,UAAC+D,EAAA,EAAS,CACR7C,SAAS,KACTxF,GAAI,CACFL,OAAQ,OACRjB,QAAS,OACT4J,cAAe,SACf3J,eAAgB,MAChBiG,WAAY,UACZ,WAEF,SAAC2D,EAAA,GAAI,CAACC,WAAS,EAACC,UAAU,MAAM9J,eAAe,SAASiG,WAAW,UAAU8D,QAAS,EAAE,UACtF,SAACH,EAAA,GAAI,CAACtH,MAAI,EAAC0H,GAAI,GAAG,UAChB,SAAC,EAAc,CACb7J,MAAO+I,EACP9I,MAAM,kCACNC,cAAe8D,EACf7D,iBAAkB8I,EAClB7I,aAAa,SAAC,EAAW,CAAC4D,mBAAoBA,IAC9C3D,WAhDS,CACjB,CAAE4B,OAAQ,eAAMD,SAAU,QAC1B,CAAEC,OAAQ,eAAMD,SAAU,aAC1B,CAAEC,OAAQ,eAAMD,SAAU,cAC1B,CAAEC,OAAQ,qBAAOD,SAAU,eAC3B,CAAEC,OAAQ,qBAAOD,SAAU,UA4CnB1B,YAvCc,SAACwJ,GACvBR,EAAoBQ,GACpBV,GAAW,EACb,SAwCI,SAACxI,EAAA,EAAG,CAACmJ,EAAG,EAAE,UACR,SAACzG,EAAA,EAAM,CACL5D,QAAQ,WACRK,QAAS,WACPuE,GAAU,EACZ,EAAE,SACH,iCAKH,SAAC,EAAS,CACRnF,KAAMgK,EACN5J,QAAS,kBAAM6J,GAAW,EAAM,EAChCpC,UAAWA,EACXC,WAAY8B,EACZ7B,QAASmC,MAIjB,C","sources":["components/ConfirmDialog/index.tsx","components/SelectingTable/index.tsx","content/manage/Apply/BulkActions.tsx","content/manage/Apply/UserModal.tsx","content/manage/Apply/index.tsx"],"sourcesContent":["import { Box, Button, Dialog, Typography } from '@mui/material'\n\nconst ConfirmDialog = ({ open, handleClose, handleSubmit, confirmMessage = '정말 실행하시겠습니까?' }) => {\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <Box textAlign=\"center\" p={3}>\n        <Typography variant=\"h4\" color=\"primary\">\n          {confirmMessage}\n        </Typography>\n        <Box display=\"flex\" justifyContent=\"space-evenly\" mt={2}>\n          <Button variant=\"outlined\" onClick={handleClose}>\n            취소\n          </Button>\n          <Button variant=\"contained\" color=\"error\" onClick={handleSubmit}>\n            확인\n          </Button>\n        </Box>\n      </Box>\n    </Dialog>\n  )\n}\n\nexport default ConfirmDialog\n","import {\n  Box,\n  Card,\n  CardHeader,\n  Checkbox,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography\n} from '@mui/material'\nimport { ChangeEvent } from 'react'\n\nconst SelectingTable = ({ items, title, selectedItems, setSelectedItems, BulkActions, properties, handleClick }) => {\n  const selectedSomeApplicants = selectedItems.length > 0 && selectedItems.length < items.length\n  const selectedAllApplicants = selectedItems.length === items.length\n  const selectedBulkActions = selectedItems.length > 0\n\n  const handleSelectAllApplicants = (event: ChangeEvent<HTMLInputElement>): void => {\n    setSelectedItems(event.target.checked ? items && items.map(items => items.id) : [])\n  }\n\n  const handleSelectOneApplicant = (event: ChangeEvent<HTMLInputElement>, itemId: number): void => {\n    if (!selectedItems.includes(itemId)) {\n      setSelectedItems(prevSelected => [...prevSelected, itemId])\n    } else {\n      setSelectedItems(prevSelected => prevSelected.filter(id => id !== itemId))\n    }\n  }\n\n  return (\n    <Card>\n      {selectedBulkActions ? (\n        <Box height=\"55px\">\n          <Box flex={1} p={1}>\n            {BulkActions}\n          </Box>{' '}\n        </Box>\n      ) : (\n        <CardHeader title={title} />\n      )}\n\n      <Divider />\n      <TableContainer sx={{ height: '50vh' }}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  color=\"primary\"\n                  checked={selectedAllApplicants}\n                  indeterminate={selectedSomeApplicants}\n                  onChange={handleSelectAllApplicants}\n                />\n              </TableCell>\n              {properties.map(property => {\n                return <TableCell>{property.header}</TableCell>\n              })}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {items &&\n              items.map((item, i) => {\n                const isItemSelected = selectedItems.includes(item.id)\n                return (\n                  <TableRow hover key={item.id} id={item.id} onClick={() => {handleClick(i)}}>\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        onClick={e => e.stopPropagation()}\n                        onChange={(event: ChangeEvent<HTMLInputElement>) => handleSelectOneApplicant(event, item.id)}\n                        value={isItemSelected}\n                      />\n                    </TableCell>\n\n                    {properties.map((property, index) => {\n                      return (\n                        <TableCell sx={{ cursor: 'pointer' }}>\n                          <Typography variant=\"body1\" fontWeight={index === 0 && 'bold'} gutterBottom noWrap>\n                            {item[property.property]}\n                          </Typography>\n                        </TableCell>\n                      )\n                    })}\n                  </TableRow>\n                )\n              })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Card>\n  )\n}\n\nexport default SelectingTable\n","import { Box, Button } from '@mui/material'\nimport { styled } from '@mui/material/styles'\n\nimport CheckCircleTwoToneIcon from '@mui/icons-material/CheckCircleTwoTone'\nimport PersonOffTwoToneIcon from '@mui/icons-material/PersonOffTwoTone'\nimport axios from 'axios'\nimport { useAuthHeader } from 'react-auth-kit'\nimport { useSnackbar } from 'notistack'\nimport { useNavigate, useParams } from 'react-router'\nimport ConfirmDialog from 'src/components/ConfirmDialog'\nimport { useState } from 'react'\n\nconst ButtonError = styled(Button)(\n  ({ theme }) => `\n     background: ${theme.colors.error.main};\n     color: ${theme.palette.error.contrastText};\n\n     &:hover {\n        background: ${theme.colors.error.dark};\n     }\n    `\n)\n\nconst ButtonSuccess = styled(Button)(\n  ({ theme }) => `\n       background: ${theme.colors.success.main};\n       color: ${theme.palette.success.contrastText};\n  \n       &:hover {\n          background: ${theme.colors.success.dark};\n       }\n      `\n)\n\ninterface BulkActionsProps {\n  selectedApplicants: number[]\n  onCloseModal?: () => void\n}\n\ntype ResultType = 'PASS' | 'FAIL'\n\ninterface SubmitApplicant {\n  userId: number\n  result: ResultType\n}\n\nfunction BulkActions({ selectedApplicants, onCloseModal }: BulkActionsProps) {\n  const authHeader = useAuthHeader()\n  const { enqueueSnackbar } = useSnackbar()\n  const navigate = useNavigate()\n  const params = useParams()\n  const [isDialog, setIsDialog] = useState<boolean>()\n  const [resultType, setResultType] = useState<ResultType>('FAIL')\n\n  const handleFail = () => {\n    setResultType('FAIL')\n    setIsDialog(true)\n  }\n\n  const handlePass = () => {\n    setResultType('PASS')\n    setIsDialog(true)\n  }\n\n  const handleClick = (resultType: ResultType) => {\n    const submitApplicants = selectedApplicants.map(id => {\n      return {\n        userId: id,\n        result: resultType as ResultType\n      }\n    })\n    handleSubmit(submitApplicants)\n  }\n\n  const handleSubmit = (submitApplicants: SubmitApplicant[]) => {\n    axios\n      .put(`${process.env.REACT_APP_APIHOST}/apply/results?clubId=${params.id}`, submitApplicants, {\n        headers: { Authorization: authHeader() }\n      })\n      .then(res => {\n        if (res.data.message === 'ok') {\n          enqueueSnackbar('정상적으로 처리되었습니다.', { variant: 'success' })\n          onCloseModal ? onCloseModal() : navigate(-1)\n        } else {\n          throw new Error()\n        }\n      })\n      .catch(err => {\n        enqueueSnackbar(`${err.response.data?.message} 다시 시도해 주십시오.`, { variant: 'error' })\n      })\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Box display=\"flex\" alignItems=\"center\">\n          <ButtonError sx={{ ml: 1 }} startIcon={<PersonOffTwoToneIcon />} variant=\"contained\" onClick={handleFail}>\n            불합격\n          </ButtonError>\n          <ButtonSuccess sx={{ ml: 1 }} startIcon={<CheckCircleTwoToneIcon />} variant=\"contained\" onClick={handlePass}>\n            합격\n          </ButtonSuccess>\n        </Box>\n      </Box>\n      <ConfirmDialog\n        open={isDialog}\n        handleClose={() => {\n          setIsDialog(false)\n        }}\n        handleSubmit={() => handleClick(resultType)}\n        confirmMessage={`정말 ${resultType==='FAIL' ? '불' : ''}합격처리 하시겠습니까?`}\n      />\n    </>\n  )\n}\n\nexport default BulkActions\n","import { Box, Button, Modal, styled, TextareaAutosize, Typography } from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport { Applicant } from 'src/models/Applicant'\nimport { Form } from 'src/models/Form'\nimport BulkActions from './BulkActions'\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext'\nimport NavigateBeforeIcon from '@mui/icons-material/NavigateBefore'\nimport { useTheme } from '@mui/material/styles'\nimport useMediaQuery from '@mui/material/useMediaQuery'\n\ninterface UserModalProps {\n  open: boolean\n  onClose: () => void\n  questions: Form\n  Applicants: Applicant[]\n  current: number\n}\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: '80%',\n  maxWidth: '600px',\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4\n}\n\nconst CustomTextareaAutosize = styled(TextareaAutosize)`\n  margin: 10px 0px;\n  padding: 8px;\n  width: 100%;\n  border-radius: 5px;\n  border: 1px solid lightgrey;\n  font-family: 'Pretendard';\n`\n\nconst UserModal = ({ open, onClose, questions, Applicants, current }: UserModalProps) => {\n  const [currentApplicant, setCurrentApplicant] = useState<number>(current) // Index of Applicants[]\n  const numberOfApplicants = Applicants.length\n\n  const theme = useTheme()\n  const matches = useMediaQuery(theme.breakpoints.up('sm'))\n\n  useEffect(() => {\n    setCurrentApplicant(current)\n  }, [open])\n\n  const handleNextApplicant = () => {\n    setCurrentApplicant((currentApplicant + 1) % numberOfApplicants)\n  }\n\n  const handlePrevApplicant = () => {\n    if (currentApplicant === 0) {\n      setCurrentApplicant(numberOfApplicants - 1)\n    } else {\n      setCurrentApplicant(currentApplicant - 1)\n    }\n  }\n\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Box sx={style}>\n        <Box justifyContent=\"center\">\n          <Typography variant=\"h3\" sx={{ textAlign: 'center' }}>\n            {Applicants[currentApplicant]?.name} 님 의 지원서\n          </Typography>\n          <Typography variant=\"subtitle2\" sx={{ mb: 2, textAlign: 'center' }}>\n            {Applicants[currentApplicant]?.studentId} / {Applicants[currentApplicant]?.department}\n          </Typography>\n        </Box>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-around\">\n          {matches && (\n            <Button onClick={handlePrevApplicant}>\n              <NavigateBeforeIcon />\n            </Button>\n          )}\n\n          <Box width={matches ? '60%' : '90%'}>\n            {questions.question1 && (\n              <Box>\n                <Typography variant=\"subtitle1\">{questions.question1}</Typography>\n                <CustomTextareaAutosize\n                  maxRows={4}\n                  minRows={3}\n                  value={Applicants[currentApplicant]?.answer1}\n                  disabled\n                />\n              </Box>\n            )}\n            {questions.question2 && (\n              <Box>\n                <Typography variant=\"subtitle1\">{questions.question2}</Typography>\n                <CustomTextareaAutosize\n                  maxRows={4}\n                  minRows={3}\n                  value={Applicants[currentApplicant]?.answer2}\n                  disabled\n                />\n              </Box>\n            )}\n            {questions.question3 && (\n              <Box>\n                <Typography variant=\"subtitle1\">{questions.question3}</Typography>\n                <CustomTextareaAutosize\n                  maxRows={4}\n                  minRows={3}\n                  value={Applicants[currentApplicant]?.answer3}\n                  disabled\n                />\n              </Box>\n            )}\n          </Box>\n          {matches && (\n            <Button onClick={handleNextApplicant}>\n              <NavigateNextIcon />\n            </Button>\n          )}\n        </Box>\n\n        {matches ? (\n          <Box marginTop={2} display=\"flex\" justifyContent=\"center\">\n            <BulkActions selectedApplicants={[Applicants[currentApplicant]?.id]} onCloseModal={onClose} />\n            <Button variant=\"outlined\" onClick={onClose} sx={{ ml: 1, mt: !matches && 1 }}>\n              닫기\n            </Button>\n          </Box>\n        ) : (\n          <>\n            <Box marginTop={2} display=\"flex\" justifyContent=\"center\">\n              <BulkActions selectedApplicants={[Applicants[currentApplicant]?.id]} onCloseModal={onClose} />\n            </Box>\n            <Box display=\"flex\" justifyContent=\"space-around\" sx={{ mt: 2 }}>\n              <Button onClick={handlePrevApplicant}>\n                <NavigateBeforeIcon />\n              </Button>\n              <Button variant=\"outlined\" onClick={onClose} >\n                닫기\n              </Button>\n              <Button onClick={handleNextApplicant}>\n                <NavigateNextIcon />\n              </Button>\n            </Box>\n          </>\n        )}\n      </Box>\n    </Modal>\n  )\n}\n\nexport default UserModal\n","import { FC } from 'react'\nimport axios, { AxiosResponse } from 'axios'\nimport { useEffect, useState } from 'react'\nimport { Applicant } from 'src/models/Applicant'\n\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { Box, Button, Container, Grid } from '@mui/material'\nimport SelectingTable from 'src/components/SelectingTable'\nimport BulkActions from './BulkActions'\nimport UserModal from './UserModal'\nimport { Form } from 'src/models/Form'\nimport { useAuthHeader } from 'react-auth-kit'\n// import { Answers } from 'src/models/Answers'\n\nconst ApplyPage: FC<void> = () => {\n  const [applicants, setApplicants] = useState<Applicant[]>([])\n  const [selectedApplicants, setSelectedApplicants] = useState<number[]>([])\n  const [questions, setQuestions] = useState<Form>({ question1: '', question2: '', question3: '' })\n  const [isModal, setIsModal] = useState<boolean>(false)\n  // const [answer, setAnswer] = useState<Answers>({ answer1: '', answer2: '', answer3: '' })\n  const [clickedApplicant, setClickedApplicant] = useState<number>(0)\n  const authHeader = useAuthHeader()\n  const navigate = useNavigate()\n  const properties = [\n    { header: '이름', property: 'name' },\n    { header: '학번', property: 'studentId' },\n    { header: '학과', property: 'department' },\n    { header: '연락처', property: 'phoneNumber' },\n    { header: '이메일', property: 'email' }\n  ]\n\n  const params = useParams()\n\n  const handleItemClick = (idx) => {\n    setClickedApplicant(idx)\n    setIsModal(true)\n  }\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_APIHOST}/apply/applicants/${params.id}`, {\n        headers: { Authorization: authHeader() }\n      })\n      .then((res: AxiosResponse<Applicant[]>) => {\n        setApplicants(res.data)\n      })\n\n    axios.get(`${process.env.REACT_APP_APIHOST}/club/form?clubId=${params.id}`).then((res: AxiosResponse<Form>) => {\n      setQuestions(res.data)\n    })\n  }, [])\n\n  return (\n    <Container\n      maxWidth=\"md\"\n      sx={{\n        height: '80vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'end',\n        alignItems: 'center'\n      }}\n    >\n      <Grid container direction=\"row\" justifyContent=\"center\" alignItems=\"stretch\" spacing={3}>\n        <Grid item xs={12}>\n          <SelectingTable\n            items={applicants}\n            title=\"지원자 목록\"\n            selectedItems={selectedApplicants}\n            setSelectedItems={setSelectedApplicants}\n            BulkActions={<BulkActions selectedApplicants={selectedApplicants} />}\n            properties={properties}\n            handleClick={handleItemClick}\n          />\n        </Grid>\n      </Grid>\n      <Box m={2}>\n        <Button\n          variant=\"outlined\"\n          onClick={() => {\n            navigate(-1)\n          }}\n        >\n          뒤로 가기\n        </Button>\n      </Box>\n\n      <UserModal\n        open={isModal}\n        onClose={() => setIsModal(false)}\n        questions={questions}\n        Applicants={applicants}\n        current={clickedApplicant}\n      />\n    </Container>\n  )\n}\n\nexport default ApplyPage\n"],"names":["open","handleClose","handleSubmit","confirmMessage","onClose","textAlign","p","variant","color","display","justifyContent","mt","onClick","items","title","selectedItems","setSelectedItems","BulkActions","properties","handleClick","selectedSomeApplicants","length","selectedAllApplicants","selectedBulkActions","Card","Box","height","flex","CardHeader","Divider","TableContainer","sx","Table","TableHead","TableRow","TableCell","padding","Checkbox","checked","indeterminate","onChange","event","target","map","id","property","header","TableBody","item","i","isItemSelected","includes","hover","e","stopPropagation","itemId","prevSelected","filter","value","index","cursor","Typography","fontWeight","gutterBottom","noWrap","ButtonError","styled","Button","theme","colors","error","main","palette","contrastText","dark","ButtonSuccess","success","selectedApplicants","onCloseModal","authHeader","useAuthHeader","enqueueSnackbar","useSnackbar","navigate","useNavigate","params","useParams","useState","isDialog","setIsDialog","resultType","setResultType","submitApplicants","userId","result","axios","process","headers","Authorization","then","res","data","message","Error","catch","err","response","alignItems","ml","startIcon","PersonOffTwoTone","CheckCircleTwoTone","ConfirmDialog","style","position","top","left","transform","width","maxWidth","bgcolor","border","boxShadow","CustomTextareaAutosize","TextareaAutosize","questions","Applicants","current","currentApplicant","setCurrentApplicant","numberOfApplicants","useTheme","matches","useMediaQuery","breakpoints","up","useEffect","handleNextApplicant","handlePrevApplicant","Modal","name","mb","studentId","department","NavigateBefore","question1","maxRows","minRows","answer1","disabled","question2","answer2","question3","answer3","NavigateNext","marginTop","applicants","setApplicants","setSelectedApplicants","setQuestions","isModal","setIsModal","clickedApplicant","setClickedApplicant","Container","flexDirection","Grid","container","direction","spacing","xs","idx","m"],"sourceRoot":""}