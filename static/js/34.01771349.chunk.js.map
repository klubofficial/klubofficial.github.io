{"version":3,"file":"static/js/34.01771349.chunk.js","mappings":"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","sources":["components/CancelSubmitBtns/index.tsx","content/manage/Conference/ConferenceRegister.tsx"],"sourcesContent":["import { Button, Stack } from '@mui/material'\nimport { FC } from 'react'\nimport { useNavigate } from 'react-router-dom'\n\ninterface CancelSubmitBtnsProps {\n  handleSubmit: (event) => void\n  handleCancel?: (event) => void\n  submitBtnText?: string\n}\n\nconst CancelSubmitBtns: FC<CancelSubmitBtnsProps> = ({\n  handleSubmit,\n  handleCancel,\n  submitBtnText\n}: CancelSubmitBtnsProps) => {\n  const navigate = useNavigate()\n\n  const _handleCancel = event => {\n    if (handleCancel === undefined) navigate(-1)\n    else handleCancel(event)\n  }\n\n  return (\n    <Stack mt={2} pb={2} direction=\"row\" spacing={2} justifyContent=\"center\">\n      <Button color=\"error\" variant=\"outlined\" sx={{ width: '50%', maxWidth: '120px' }} onClick={_handleCancel}>\n        취소\n      </Button>\n\n      <Button\n        color=\"success\"\n        variant=\"contained\"\n        onClick={handleSubmit}\n        sx={{ width: '50%', maxWidth: '120px', padding: '0px' }}\n      >\n        {submitBtnText || '등록'}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default CancelSubmitBtns\n","import {\n  Box,\n  Card,\n  Checkbox,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography\n} from '@mui/material'\nimport MobileDatePicker from '@mui/lab/MobileDatePicker'\nimport axios, { AxiosResponse } from 'axios'\nimport dayjs, { Dayjs } from 'dayjs'\nimport { useSnackbar } from 'notistack'\nimport { ChangeEvent, useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\nimport { Member } from 'src/models/member'\nimport { PureLightTheme } from 'src/theme/schemes/PureLightTheme'\nimport { useAuthHeader } from 'react-auth-kit'\n\nconst ConferenceRegister = () => {\n  const [title, setTitle] = useState<string>()\n  const [date, setDate] = useState<Dayjs | null>(dayjs('2023-01-01T00:00:00'))\n  const [members, setMembers] = useState<Member[]>([])\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n  const params = useParams()\n  const navigate = useNavigate()\n  const { enqueueSnackbar } = useSnackbar()\n  const authHeader = useAuthHeader()\n\n  const selectedSomeMembers = selectedMembers.length > 0 && selectedMembers.length < members.length\n  const selectedAllMembers = selectedMembers.length === members.length\n\n  const handleSelectAllMembers = (event: ChangeEvent<HTMLInputElement>): void => {\n    setSelectedMembers(event.target.checked ? members && members.map(member => member.id) : [])\n  }\n\n  const handleSelectOneMember = (event: ChangeEvent<HTMLInputElement>, memberId: number): void => {\n    if (!selectedMembers.includes(memberId)) {\n      setSelectedMembers(prevSelected => [...prevSelected, memberId])\n    } else {\n      setSelectedMembers(prevSelected => prevSelected.filter(id => id !== memberId))\n    }\n  }\n\n  const handleSubmit = async () => {\n    try {\n      const { data } = await axios.post(\n        `${process.env.REACT_APP_APIHOST}/club/conference`,\n        {\n          conference: { clubId: params.id, title: title, startAt: date, user: selectedMembers }\n        },\n        {\n          headers: { Authorization: authHeader() }\n        }\n      )\n\n      if (data.message === 'ok') {\n        enqueueSnackbar('등록이 완료되었습니다.', { variant: 'success' })\n        navigate(`/manage/${params.id}/attendance`)\n      } else {\n        enqueueSnackbar('오류가 발생했습니다. 다시 시도해 주십시오.', { variant: 'error' })\n      }\n    } catch (e) {\n      enqueueSnackbar('오류가 발생했습니다. 다시 시도해 주십시오.', { variant: 'error' })\n    }\n  }\n\n  useEffect(() => {\n    axios\n      .get(`${process.env.REACT_APP_APIHOST}/club/member?clubId=${params.id}`, {\n        headers: { Authorization: authHeader() }\n      })\n      .then((res: AxiosResponse<Member[]>) => {\n        const activeMembers = res.data.filter(member => member.deletedAt === null && member.firedAt === null)\n        setMembers(activeMembers)\n      })\n  }, [])\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>출석 관리</title>\n      </Helmet>\n      <Card>\n        <Grid container sx={{ justifyContent: 'center' }}>\n          <Grid item xs={12} md={6}>\n            <Box padding={{ xs: 3, md: 6 }} paddingBottom={{ xs: 0 }}>\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n                행사명\n              </Typography>\n              <TextField required id=\"title\" label=\"행사명\" onChange={e => setTitle(e.target.value)} fullWidth />\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n                행사일\n              </Typography>\n              <MobileDatePicker\n                label=\"행사일\"\n                inputFormat=\"yyyy/MM/dd\"\n                value={date}\n                onChange={newValue => {\n                  setDate(newValue)\n                }}\n                renderInput={params => <TextField {...params} sx={{ width: '100%' }} />}\n              />\n            </Box>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Box padding={{ xs: 3, md: 6 }}>\n              <Typography variant=\"h4\" color={PureLightTheme.colors.primary.main} sx={{ margin: '20px 0px' }}>\n                참여인원\n              </Typography>\n              <TableContainer sx={{ maxHeight: '45vh', overflow: 'scroll' }}>\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color=\"primary\"\n                          checked={selectedAllMembers}\n                          indeterminate={selectedSomeMembers}\n                          onChange={handleSelectAllMembers}\n                        />\n                      </TableCell>\n                      <TableCell>이름 | 등급</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {members &&\n                      members.map(member => {\n                        const isMemberSelected = selectedMembers.includes(member.id)\n                        return (\n                          <TableRow hover key={member.id} selected={isMemberSelected}>\n                            <TableCell padding=\"checkbox\">\n                              <Checkbox\n                                color=\"primary\"\n                                checked={isMemberSelected}\n                                onChange={(event: ChangeEvent<HTMLInputElement>) =>\n                                  handleSelectOneMember(event, member.id)\n                                }\n                                value={isMemberSelected}\n                              />\n                            </TableCell>\n                            <TableCell>\n                              <Typography variant=\"body1\" fontWeight=\"bold\" color=\"text.primary\" gutterBottom noWrap>\n                                <Box style={{ display: 'flex', alignItems: 'baseline' }}>\n                                  {member.name} | {member.level}\n                                </Box>\n                              </Typography>\n                              <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                                {member.studentId}\n                              </Typography>\n                            </TableCell>\n                          </TableRow>\n                        )\n                      })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </Grid>\n        </Grid>\n        <CancelSubmitBtns handleSubmit={handleSubmit} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default ConferenceRegister\n"],"names":["handleSubmit","handleCancel","submitBtnText","navigate","useNavigate","mt","pb","direction","spacing","justifyContent","color","variant","sx","width","maxWidth","onClick","event","undefined","padding","useState","title","setTitle","dayjs","date","setDate","members","setMembers","selectedMembers","setSelectedMembers","params","useParams","enqueueSnackbar","useSnackbar","authHeader","useAuthHeader","selectedSomeMembers","length","selectedAllMembers","axios","process","conference","clubId","id","startAt","user","headers","Authorization","data","message","useEffect","then","res","activeMembers","filter","member","deletedAt","firedAt","m","container","item","xs","md","paddingBottom","PureLightTheme","margin","required","label","onChange","e","target","value","fullWidth","inputFormat","newValue","renderInput","maxHeight","overflow","checked","indeterminate","map","isMemberSelected","includes","hover","selected","memberId","prevSelected","fontWeight","gutterBottom","noWrap","style","display","alignItems","name","level","studentId"],"sourceRoot":""}