{"version":3,"file":"static/js/8231.7460176e.chunk.js","mappings":"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","sources":["components/CancelSubmitBtns/index.tsx","data/meetingManage.ts","content/manage/Conference/Meetings/MeetingManage.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\n\nimport { Button, Stack } from '@mui/material'\n\ninterface CancelSubmitBtnsProps {\n  handleSubmit: React.MouseEventHandler<HTMLButtonElement>\n  handleCancel?: React.MouseEventHandler<HTMLButtonElement>\n  displayCancelBtn?: boolean\n  submitBtnText?: string\n  cancelBtnText?: string\n}\n\nconst CancelSubmitBtns: React.FC<CancelSubmitBtnsProps> = ({\n  handleSubmit,\n  handleCancel,\n  displayCancelBtn = true,\n  submitBtnText = '등록',\n  cancelBtnText = '취소'\n}: CancelSubmitBtnsProps) => {\n  const navigate = useNavigate()\n\n  const _handleCancel: React.MouseEventHandler<HTMLButtonElement> = event => {\n    if (handleCancel === undefined) navigate(-1)\n    else handleCancel(event)\n  }\n\n  return (\n    <Stack mt={2} pb={2} direction=\"row\" spacing={2} justifyContent=\"center\">\n      {displayCancelBtn && (\n        <Button color=\"error\" variant=\"outlined\" sx={{ width: '50%', maxWidth: '120px' }} onClick={_handleCancel}>\n          {cancelBtnText}\n        </Button>\n      )}\n\n      <Button color=\"success\" variant=\"contained\" onClick={handleSubmit} sx={{ width: '50%', maxWidth: '120px' }}>\n        {submitBtnText}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default CancelSubmitBtns\n","import { type GridColDef } from \"@mui/x-data-grid\"\n\nexport const MEETING_MANAGE_COLUMN: GridColDef[] = [\n    { field: 'name', headerName: '이름', flex: 1 },\n    { field: 'studentId', headerName: '학번', flex: 1 },\n    { field: 'department', headerName: '소속 학부/학과', flex: 1 },\n    { field: 'level', headerName: '회원 등급', flex: 1 },\n  ]","import { useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useNavigate, useParams } from 'react-router'\n\nimport { Box, Card, Container, Grid, TextField, Typography, useTheme } from '@mui/material'\nimport {\n  DataGrid,\n  type GridRowSelectionModel,\n  GridToolbarColumnsButton,\n  GridToolbarContainer,\n  GridToolbarDensitySelector,\n  GridToolbarExport,\n  GridToolbarFilterButton,\n  GridToolbarQuickFilter\n} from '@mui/x-data-grid'\nimport { LocalizationProvider, StaticDatePicker } from '@mui/x-date-pickers'\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\n\nimport { MEETING_MANAGE_COLUMN } from 'src/data/meetingManage'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport { useGetConferenceRound, usePatchConferenceRound } from 'src/hooks/api/clubConferenceHooks'\n\nconst MeetingManage = () => {\n  const theme = useTheme()\n  const navigate = useNavigate()\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null)\n\n  const { id, confId, meetingId } = useParams()\n  const clubId = Number(id)\n  const conferenceId = Number(confId)\n  const conferenceRoundId = Number(meetingId)\n  const { data: round, isSuccess } = useGetConferenceRound(clubId, conferenceId, conferenceRoundId)\n  const patchRoundMutation = usePatchConferenceRound()\n\n  const handleSubmit = () => {\n    if (!selectedDate) return\n    isSuccess\n      ? patchRoundMutation.mutate({ clubId, conferenceId, conferenceRoundId, note: round?.note, startAt: selectedDate })\n      : null\n    navigate(-1)\n  }\n\n  useEffect(() => {\n    if (round?.startAt) setSelectedDate(round?.startAt)\n  }, [round])\n\n  // const handleRowSelectionChange = (selectedMemberIds: GridRowSelectionModel) => {\n  //   const selectedIDs = new Set(selectedMemberIds)\n  //   const selectedRows = conferenceMemberRows.filter(row => selectedIDs.has(row.id))\n  //   setSelectedMembers(selectedRows.map(row => row.id))\n  // }\n\n  const handleSelectedDateChange = (date: Date | null) => {\n    if (date == null) return\n    setSelectedDate(date)\n  }\n\n  const handleCancel = () => {\n    if (round?.startAt) setSelectedDate(round?.startAt)\n  }\n\n  const Toolbar = () => {\n    return (\n      <GridToolbarContainer sx={{ justifyContent: 'space-between' }}>\n        <GridToolbarColumnsButton />\n        <GridToolbarFilterButton sx={{ '& svg': { width: '18px', height: '18px' } }} />\n        <GridToolbarDensitySelector />\n        <GridToolbarExport />\n        <GridToolbarQuickFilter />\n      </GridToolbarContainer>\n    )\n  }\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>{`${round ? round?.round : ''}회차 관리`}</title>\n      </Helmet>\n      {/* <PageTitleWrapper>\n        <PageHeader clubName={''} buttonText=\"행사 추가\" link={`/manage/${clubId}/attendance/register`} />\n      </PageTitleWrapper> */}\n      <Container>\n        <Card>\n          <Box m={3}>\n            <Grid container sx={{ justifyContent: 'center' }}>\n              <Grid item xs={12} md={8}>\n                <Typography variant=\"h4\" component=\"h4\">\n                  {`${round ? round?.round : ''}회차 관리`}\n                </Typography>\n                <Box sx={{ mt: 1 }}>\n                  <Box display=\"flex\" alignItems=\"baseline\">\n                    <Typography variant=\"h4\" color={theme.colors.primary.main} display=\"inline-block\">\n                      출석\n                    </Typography>\n                    <Typography variant=\"caption\" marginLeft=\"0.4em\">\n                      행사에 참여한 회원을 모두 체크해주세요\n                    </Typography>\n                  </Box>\n                  <DataGrid\n                    autoHeight\n                    checkboxSelection\n                    rowSelectionModel={selectedMembers}\n                    // onRowSelectionModelChange={handleRowSelectionChange}\n                    rows={[]}\n                    columns={MEETING_MANAGE_COLUMN}\n                    slots={{ toolbar: Toolbar }}\n                    disableRowSelectionOnClick\n                    sx={{ mt: 1 }}\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={4}>\n                {selectedDate && (\n                  <Box paddingLeft={{ xs: 3 }} paddingBottom={{ xs: 0 }}>\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <StaticDatePicker\n                        // orientation='landscape'\n                        label={`${round ? round?.round : ''}회차 일자`}\n                        value={selectedDate}\n                        onChange={handleSelectedDateChange}\n                        componentsProps={{ actionBar: { actions: [] } }} // 확인 취소 버튼 없애기\n                        renderInput={params => <TextField sx={{ display: 'none' }} {...params} />}\n                      />\n                    </LocalizationProvider>\n                  </Box>\n                )}\n              </Grid>\n            </Grid>\n            <CancelSubmitBtns handleSubmit={handleSubmit} handleCancel={handleCancel} submitBtnText=\"저장\" />\n          </Box>\n        </Card>\n      </Container>\n    </Box>\n  )\n}\n\nexport default MeetingManage\n"],"names":["_ref","handleSubmit","handleCancel","_ref$displayCancelBtn","displayCancelBtn","_ref$submitBtnText","submitBtnText","_ref$cancelBtnText","cancelBtnText","navigate","useNavigate","_jsxs","Stack","mt","pb","direction","spacing","justifyContent","children","_jsx","Button","color","variant","sx","width","maxWidth","onClick","event","undefined","MEETING_MANAGE_COLUMN","field","headerName","flex","theme","useTheme","_useState","useState","_useState2","_slicedToArray","selectedMembers","_useState3","_useState4","selectedDate","setSelectedDate","_useParams","useParams","id","confId","meetingId","clubId","Number","conferenceId","conferenceRoundId","_useGetConferenceRoun","useGetConferenceRound","round","data","isSuccess","patchRoundMutation","usePatchConferenceRound","useEffect","startAt","Box","m","Helmet","concat","Container","Card","Grid","container","item","xs","md","Typography","component","display","alignItems","colors","primary","main","marginLeft","DataGrid","autoHeight","checkboxSelection","rowSelectionModel","rows","columns","slots","toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","height","GridToolbarDensitySelector","GridToolbarExport","GridToolbarQuickFilter","disableRowSelectionOnClick","paddingLeft","paddingBottom","LocalizationProvider","dateAdapter","AdapterDayjs","StaticDatePicker","label","value","onChange","date","componentsProps","actionBar","actions","renderInput","params","TextField","_objectSpread","CancelSubmitBtns","mutate","note"],"sourceRoot":""}