{"version":3,"file":"static/js/8231.db21880e.chunk.js","mappings":"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","sources":["components/CancelSubmitBtns/index.tsx","data/meetingManage.ts","content/manage/Conference/Meetings/MeetingManage.tsx"],"sourcesContent":["import { useNavigate } from 'react-router-dom'\n\nimport { Button, Stack } from '@mui/material'\n\ninterface CancelSubmitBtnsProps {\n  handleSubmit: React.MouseEventHandler<HTMLButtonElement>\n  handleCancel?: React.MouseEventHandler<HTMLButtonElement>\n  displayCancelBtn?: boolean\n  submitBtnText?: string\n  cancelBtnText?: string\n}\n\nconst CancelSubmitBtns: React.FC<CancelSubmitBtnsProps> = ({\n  handleSubmit,\n  handleCancel,\n  displayCancelBtn = true,\n  submitBtnText = '등록',\n  cancelBtnText = '취소'\n}: CancelSubmitBtnsProps) => {\n  const navigate = useNavigate()\n\n  const _handleCancel: React.MouseEventHandler<HTMLButtonElement> = event => {\n    if (handleCancel === undefined) navigate(-1)\n    else handleCancel(event)\n  }\n\n  return (\n    <Stack mt={2} pb={2} direction=\"row\" spacing={2} justifyContent=\"center\">\n      {displayCancelBtn && (\n        <Button color=\"error\" variant=\"outlined\" sx={{ width: '50%', maxWidth: '120px' }} onClick={_handleCancel}>\n          {cancelBtnText}\n        </Button>\n      )}\n\n      <Button color=\"success\" variant=\"contained\" onClick={handleSubmit} sx={{ width: '50%', maxWidth: '120px' }}>\n        {submitBtnText}\n      </Button>\n    </Stack>\n  )\n}\n\nexport default CancelSubmitBtns\n","import { type GridColDef } from \"@mui/x-data-grid\"\n\nexport const MEETING_MANAGE_COLUMN: GridColDef[] = [\n    { field: 'name', headerName: '이름', flex: 1 },\n    { field: 'studentId', headerName: '학번', flex: 1 },\n    { field: 'department', headerName: '소속 학부/학과', flex: 1 },\n    { field: 'level', headerName: '회원 등급', flex: 1 },\n  ]","import { useEffect, useState } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport { useNavigate, useParams } from 'react-router'\n\nimport { Box, Card, Container, Grid, TextField, Typography, useTheme } from '@mui/material'\nimport {\n  DataGrid,\n  type GridRowSelectionModel,\n  GridToolbarColumnsButton,\n  GridToolbarContainer,\n  GridToolbarDensitySelector,\n  GridToolbarExport,\n  GridToolbarFilterButton,\n  GridToolbarQuickFilter\n} from '@mui/x-data-grid'\nimport { LocalizationProvider, StaticDatePicker } from '@mui/x-date-pickers'\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'\n\nimport { MEETING_MANAGE_COLUMN } from 'src/data/meetingManage'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport {\n  useGetConferenceRound,\n  useGetConferenceRoundAttendance,\n  usePatchConferenceRound,\n  usePutConferenceRoundAttendance\n} from 'src/hooks/api/clubConferenceHooks'\nimport { type attendanceStatus } from 'src/models/conference'\n\nconst MeetingManage = () => {\n  const theme = useTheme()\n  const navigate = useNavigate()\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null)\n\n  const { id, confId, meetingId } = useParams()\n  const clubId = Number(id)\n  const conferenceId = Number(confId)\n  const conferenceRoundId = Number(meetingId)\n  const { data: round, isSuccess: isRoundSuccess } = useGetConferenceRound(clubId, conferenceId, conferenceRoundId)\n  const { data: attendance, isSuccess: isAttendanceSuccess } = useGetConferenceRoundAttendance(\n    clubId,\n    conferenceId,\n    conferenceRoundId\n  )\n  const patchRoundMutation = usePatchConferenceRound()\n  const putRoundAttendanceMutation = usePutConferenceRoundAttendance(clubId, conferenceId, conferenceRoundId)\n\n  const handleSubmit = () => {\n    if (!selectedDate) return\n    if (isRoundSuccess && isAttendanceSuccess) {\n      const selected = new Set(selectedMembers)\n      const status = attendance.conferenceParticipants\n        .filter(participant => participant.attendances.length > 0)\n        .map(participant => ({\n          id: participant.attendances[0].id,\n          attendanceType: selected.has(participant.user.id) ? 1 : 0 as attendanceStatus\n        }))\n      patchRoundMutation.mutate({ clubId, conferenceId, conferenceRoundId, note: round?.note, startAt: selectedDate })\n      putRoundAttendanceMutation.mutate(status)\n    }\n    navigate(-1)\n  }\n\n  useEffect(() => {\n    if (round?.startAt) setSelectedDate(round?.startAt)\n  }, [round])\n\n  useEffect(() => {\n    const selected: number[] = []\n    attendance?.conferenceParticipants?.forEach(participant => {\n      if (\n        participant.attendances.find(attendance => attendance.conferenceRoundId == conferenceRoundId)?.attendanceType ==\n          1 &&\n        participant.user.id\n      )\n        selected.push(participant.user.id)\n    })\n    setSelectedMembers(selected)\n  }, [attendance])\n\n  const handleRowSelectionChange = (selectedMemberIds: GridRowSelectionModel) => {\n    setSelectedMembers(selectedMemberIds as number[])\n  }\n\n  const handleSelectedDateChange = (date: Date | null) => {\n    if (date == null) return\n    setSelectedDate(date)\n  }\n\n  const handleCancel = () => {\n    if (round?.startAt) setSelectedDate(round?.startAt)\n  }\n\n  const Toolbar = () => {\n    return (\n      <GridToolbarContainer sx={{ justifyContent: 'space-between' }}>\n        <GridToolbarColumnsButton />\n        <GridToolbarFilterButton sx={{ '& svg': { width: '18px', height: '18px' } }} />\n        <GridToolbarDensitySelector />\n        <GridToolbarExport />\n        <GridToolbarQuickFilter />\n      </GridToolbarContainer>\n    )\n  }\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>{`${round ? round?.round : ''}회차 관리`}</title>\n      </Helmet>\n      {/* <PageTitleWrapper>\n        <PageHeader clubName={''} buttonText=\"행사 추가\" link={`/manage/${clubId}/attendance/register`} />\n      </PageTitleWrapper> */}\n      <Container>\n        <Card>\n          <Box m={3}>\n            <Grid container sx={{ justifyContent: 'center' }}>\n              <Grid item xs={12} md={7.5}>\n                <Typography variant=\"h4\" component=\"h4\">\n                  {`${round ? round?.round : ''}회차 관리`}\n                </Typography>\n                <Box sx={{ mt: 1 }}>\n                  <Box display=\"flex\" alignItems=\"baseline\">\n                    <Typography variant=\"h4\" color={theme.colors.primary.main} display=\"inline-block\">\n                      출석\n                    </Typography>\n                    <Typography variant=\"caption\" marginLeft=\"0.4em\">\n                      행사에 참여한 회원을 모두 체크해주세요\n                    </Typography>\n                  </Box>\n                  <DataGrid\n                    autoHeight\n                    checkboxSelection\n                    rowSelectionModel={selectedMembers}\n                    onRowSelectionModelChange={handleRowSelectionChange}\n                    rows={attendance?.conferenceParticipants.map(participant => participant.user) ?? []}\n                    columns={MEETING_MANAGE_COLUMN}\n                    slots={{ toolbar: Toolbar }}\n                    disableRowSelectionOnClick\n                    sx={{ mt: 1 }}\n                  />\n                </Box>\n              </Grid>\n              <Grid item xs={12} md={4.5}>\n                {selectedDate && (\n                  <Box paddingLeft={{ xs: 3 }} paddingBottom={{ xs: 0 }}>\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\n                      <StaticDatePicker\n                        // orientation='landscape'\n                        label={`${round ? round?.round : ''}회차 일자`}\n                        value={selectedDate}\n                        onChange={handleSelectedDateChange}\n                        componentsProps={{ actionBar: { actions: [] } }} // 확인 취소 버튼 없애기\n                        renderInput={params => <TextField sx={{ display: 'none' }} {...params} />}\n                      />\n                    </LocalizationProvider>\n                  </Box>\n                )}\n              </Grid>\n            </Grid>\n            <CancelSubmitBtns handleSubmit={handleSubmit} handleCancel={handleCancel} submitBtnText=\"저장\" />\n          </Box>\n        </Card>\n      </Container>\n    </Box>\n  )\n}\n\nexport default MeetingManage\n"],"names":["_ref","handleSubmit","handleCancel","_ref$displayCancelBtn","displayCancelBtn","_ref$submitBtnText","submitBtnText","_ref$cancelBtnText","cancelBtnText","navigate","useNavigate","_jsxs","Stack","mt","pb","direction","spacing","justifyContent","children","_jsx","Button","color","variant","sx","width","maxWidth","onClick","event","undefined","MEETING_MANAGE_COLUMN","field","headerName","flex","_attendance$conferenc2","theme","useTheme","_useState","useState","_useState2","_slicedToArray","selectedMembers","setSelectedMembers","_useState3","_useState4","selectedDate","setSelectedDate","_useParams","useParams","id","confId","meetingId","clubId","Number","conferenceId","conferenceRoundId","_useGetConferenceRoun","useGetConferenceRound","round","data","isRoundSuccess","isSuccess","_useGetConferenceRoun2","useGetConferenceRoundAttendance","attendance","isAttendanceSuccess","patchRoundMutation","usePatchConferenceRound","putRoundAttendanceMutation","usePutConferenceRoundAttendance","useEffect","startAt","_attendance$conferenc","selected","conferenceParticipants","forEach","participant","_participant$attendan","attendances","find","attendanceType","user","push","Box","m","Helmet","concat","Container","Card","Grid","container","item","xs","md","Typography","component","display","alignItems","colors","primary","main","marginLeft","DataGrid","autoHeight","checkboxSelection","rowSelectionModel","onRowSelectionModelChange","selectedMemberIds","rows","map","columns","slots","toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","height","GridToolbarDensitySelector","GridToolbarExport","GridToolbarQuickFilter","disableRowSelectionOnClick","paddingLeft","paddingBottom","LocalizationProvider","dateAdapter","AdapterDayjs","StaticDatePicker","label","value","onChange","date","componentsProps","actionBar","actions","renderInput","params","TextField","_objectSpread","CancelSubmitBtns","Set","status","filter","length","has","mutate","note"],"sourceRoot":""}