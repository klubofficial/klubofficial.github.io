{"version":3,"file":"static/js/514.32bf92bf.chunk.js","mappings":"qSAuGA,UAlFqC,WAAO,IAADA,EACzCC,GAA0BC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAwBL,EAAAA,EAAAA,UAAuBM,OAAQC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAhDG,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA8CV,EAAAA,EAAAA,UAAmB,IAAGW,GAAAT,EAAAA,EAAAA,GAAAQ,EAAA,GAA7DE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAEpCG,GAASC,EAAAA,EAAAA,MACPC,GAAoBC,EAAAA,EAAAA,MAApBD,gBAMFE,GAAWC,EAAAA,EAAAA,MACXC,EAASC,OAAOP,EAAOQ,IACvBC,EAAiB,QAAbzB,EAAGoB,WAAU,IAAApB,OAAA,EAAVA,EAAY0B,MAAMC,QAAO,SAACC,GAAoB,OAAKA,EAAEJ,KAAOF,CAAM,IAAE,GAE3EO,EAAsB,CAAEC,KAAML,EAAKK,KAAMC,SAAUN,EAAKM,UAExDC,GAA2BC,EAAAA,EAAAA,IAAoB,CACnDX,OAAAA,EACAjB,MAAOA,EACP6B,QAASxB,EACTyB,MAAOrB,EACPe,SAAUA,IA2BNO,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACfxC,EAAMyC,OAAS,IAAE,CAAAH,EAAAE,KAAA,QAC4C,OAA/D3B,EAAgB,oGAA0B,CAAE6B,QAAS,UAAUJ,EAAAK,OAAA,iBAGjEhB,EAAyBiB,cAAa,wBAAAN,EAAAO,OAAA,GAAAT,EAAA,KACvC,kBANiB,OAAAJ,EAAAc,MAAA,KAAAC,UAAA,KAQlB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,EAAG,EAAEC,SAAA,EACRC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,iCAETH,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAAH,SAAA,EACHC,EAAAA,EAAAA,KAACG,EAAAA,EAAc,CACbvD,MAAOA,EACPwD,YA1DY,SAACxD,GACnBC,EAASD,EACX,EAyDQK,KAAMA,EACNoD,WA1CW,SAACpD,GAClBC,EAAQD,EACV,EAyCQI,gBAAiBA,EACjBiD,iBAxCiB,SAACC,EAAsCC,GAC9DlD,EAAmBiD,EAAME,OAAOC,QAAUF,GAAWA,EAAQG,KAAI,SAAAC,GAAM,OAAIA,EAAO7C,EAAE,IAAI,GAC1F,EAuCQ8C,gBArCgB,SAACC,GACvBxD,GAAmB,SAAAyD,GAAY,SAAAC,QAAAC,EAAAA,EAAAA,GAAQF,GAAY,CAAED,GAAQ,GAC/D,EAoCQI,gBAlCgB,SAACJ,GACvBxD,GAAmB,SAAAyD,GAAY,OAAIA,EAAa7C,QAAO,SAAAH,GAAE,OAAIA,IAAO+C,CAAQ,GAAC,GAC/E,EAiCQK,qBA/BqB,SAACC,GAC5B9D,GAAmB,SAAAyD,GAAY,OAAIM,MAAMC,KAAK,IAAIC,IAAI,GAADP,QAAAC,EAAAA,EAAAA,GAAKF,IAAYE,EAAAA,EAAAA,GAAKG,KAAe,GAC5F,EA8BQI,qBA5BqB,SAACJ,GAC5B9D,GAAmB,SAAAyD,GAAY,OAAIA,EAAa7C,QAAO,SAAA4C,GAAQ,OAAKM,EAAaK,SAASX,EAAS,GAAC,GACtG,KA4BMd,EAAAA,EAAAA,KAAC0B,EAAAA,EAAgB,CAAC/C,aAAcA,SAIxC,C","sources":["content/manage/Conference/ConferenceRegister/index.tsx"],"sourcesContent":["import type { Dayjs } from 'dayjs'\nimport dayjs from 'dayjs'\nimport { useSnackbar } from 'notistack'\nimport type { ChangeEvent } from 'react'\nimport { useState } from 'react'\nimport { useAuthUser } from 'react-auth-kit'\nimport { Helmet } from 'react-helmet-async'\nimport { useParams } from 'react-router-dom'\n\nimport { Box, Card } from '@mui/material'\n\nimport { type ClubMember } from 'src/models/ClubMember'\nimport type { ClubMemberForAuth } from 'src/models/ClubMember'\nimport { type DateProps } from 'src/models/date'\n\nimport CancelSubmitBtns from 'src/components/CancelSubmitBtns'\n\nimport ConferenceInfo from 'src/content/manage/Conference/ConferenceEdit/ConferenceInfo'\n\nimport { useCreateConference } from 'src/hooks/api/clubConferenceHooks'\n\nconst ConferenceRegister: React.FC = () => {\n  const [title, setTitle] = useState<string>('')\n  const [date, setDate] = useState<Dayjs | null>(dayjs())\n  const [selectedMembers, setSelectedMembers] = useState<number[]>([])\n\n  const params = useParams()\n  const { enqueueSnackbar } = useSnackbar()\n\n  const changeTitle = (title: string) => {\n    setTitle(title)\n  }\n\n  const authUser = useAuthUser()\n  const clubId = Number(params.id)\n  const club = authUser()?.clubs.filter((c: ClubMemberForAuth) => c.id === clubId)[0] as ClubMemberForAuth\n\n  const clubDate: DateProps = { year: club.year, semester: club.semester }\n\n  const createConferenceMutation = useCreateConference({\n    clubId,\n    title: title,\n    startAt: date,\n    users: selectedMembers,\n    clubDate: clubDate\n  })\n\n  const changeDate = (date: Dayjs | null) => {\n    setDate(date)\n  }\n\n  const selectAllMembers = (event: ChangeEvent<HTMLInputElement>, members: ClubMember[]) => {\n    setSelectedMembers(event.target.checked ? members && members.map(member => member.id) : [])\n  }\n\n  const selectOneMember = (memberId: number) => {\n    setSelectedMembers(prevSelected => [...prevSelected, memberId])\n  }\n\n  const deleteOneMember = (memberId: number) => {\n    setSelectedMembers(prevSelected => prevSelected.filter(id => id !== memberId))\n  }\n\n  const selectAllLevelMember = (levelMembers: number[]) => {\n    setSelectedMembers(prevSelected => Array.from(new Set([...prevSelected, ...levelMembers])))\n  }\n\n  const deleteAllLevelMember = (levelMembers: number[]) => {\n    setSelectedMembers(prevSelected => prevSelected.filter(memberId => !levelMembers.includes(memberId)))\n  }\n\n  const handleSubmit = async () => {\n    if (title.length > 50) {\n      enqueueSnackbar('행사명은 50자 이내로 작성해 주십시오.', { variant: 'error' })\n      return\n    }\n    createConferenceMutation.mutateAsync()\n  }\n\n  return (\n    <Box m={3}>\n      <Helmet>\n        <title>출석 관리</title>\n      </Helmet>\n      <Card>\n        <ConferenceInfo\n          title={title}\n          changeTitle={changeTitle}\n          date={date}\n          changeDate={changeDate}\n          selectedMembers={selectedMembers}\n          selectAllMembers={selectAllMembers}\n          selectOneMember={selectOneMember}\n          deleteOneMember={deleteOneMember}\n          selectAllLevelMember={selectAllLevelMember}\n          deleteAllLevelMember={deleteAllLevelMember}\n        />\n        <CancelSubmitBtns handleSubmit={handleSubmit} />\n      </Card>\n    </Box>\n  )\n}\n\nexport default ConferenceRegister\n"],"names":["_authUser","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","dayjs","_useState4","date","setDate","_useState5","_useState6","selectedMembers","setSelectedMembers","params","useParams","enqueueSnackbar","useSnackbar","authUser","useAuthUser","clubId","Number","id","club","clubs","filter","c","clubDate","year","semester","createConferenceMutation","useCreateConference","startAt","users","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","length","variant","abrupt","mutateAsync","stop","apply","arguments","_jsxs","Box","m","children","_jsx","Helmet","Card","ConferenceInfo","changeTitle","changeDate","selectAllMembers","event","members","target","checked","map","member","selectOneMember","memberId","prevSelected","concat","_toConsumableArray","deleteOneMember","selectAllLevelMember","levelMembers","Array","from","Set","deleteAllLevelMember","includes","CancelSubmitBtns"],"sourceRoot":""}